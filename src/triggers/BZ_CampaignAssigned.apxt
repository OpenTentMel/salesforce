/**
 * Runs when a Contact is added to a Campaign and the appropriate Tasks
 * are queued and actions taken.
 */
trigger BZ_CampaignAssigned on CampaignMember (before insert) {
    System.Debug('BZ_CampaignAssigned: begin trigger');
    
    if (BZ_CloseRecruitmentController.IsCloseRecruitmentRunning)
    {
        // NOOP: we're snapshotting the campaign but we don't want to actively 
        // queue up tasks to take action, adjust the Participant or Volunteer Info, or set
        // their Is In Active Recruitment Campaign flag (which the CampaignActive trigger will take care of).
        // When we close large campaigns, all the trigger logic causes Apex CPU time limit exceptions.
        System.Debug('BZ_CampaignAssigned: NOOP because were running BZ_CloseRecruitmentController.IsCloseRecruitmentRunning');
        return;
    }
        
    List<Task> tasksToAdd = new List<Task>(); 
    List<Task> tasksToUpdate = new List<Task>(); 
    List<Contact> contactsToUpdate = new List<Contact>();
    List<CampaignMember> campaignMembersToCreateInviteTasksFor = new List<CampaignMember>();
    List<CampaignMember> campaignMembersToCreateIntroTasksFor = new List<CampaignMember>();
    List<CampaignMember> campaignMembersToCreateReinviteTasksFor = new List<CampaignMember>();
    
    Set<Id> contactIds = new Set<Id>();
    Set<Id> contactIdsOfTasksToClose = new Set<Id>();
    Set<Id> campaignIds = new Set<Id>();
    for (CampaignMember cm : Trigger.new)
    {        
        //System.Debug('BZ_CampaignAssigned: adding ContactId='+cm.ContactId + ' to contactIds ' + contactIds);
        contactIds.add(cm.ContactId);
        //System.Debug('BZ_CampaignAssigned: adding CampaignId='+cm.CampaignId + ' to campaignIds ' + campaignIds);
        campaignIds.add(cm.CampaignId);
    }
    Map<Id, Contact> contactMap = new Map<Id, Contact>([SELECT Id, Volunteer_Information__c, Participant_Information__c, User_Type__c, Signup_Date__c, BZ_User_Id__c FROM Contact WHERE Id in :contactIds]);
    Map<Id, Campaign> campaignMap = new Map<Id, Campaign>([SELECT Id, Type, IsActive, Status FROM Campaign WHERE Id in :campaignIds]);
    //System.Debug('BZ_CampaignAssigned: contactMap='+contactMap);
    //System.Debug('BZ_CampaignAssigned: campaignMap='+campaignMap);
                 
    for (CampaignMember cm : Trigger.new)
    {
        Campaign campaign = campaignMap.get(cm.CampaignId);
        //System.debug('BZ_CampaignAssigned: campaign='+campaign);
        Contact contact = contactMap.get(cm.ContactId);
        //System.debug('BZ_CampaignAssigned: contact='+contact);        
        
        if (contact == null) // This happens for Leads
        {
            System.debug('BZ_CampaignAssigned: skipping cm.ContactId='+cm.ContactId+' because the Contact is null');
            continue;
        }
        
        if (campaign == null)
        {
            // Not sure why this happens, but I've seen it before where the CampaignMember
            // has an invalid CampaignId causing it to not exist in the map.
            System.debug('BZ_CampaignAssigned: skipping cm.CampaignId='+cm.CampaignId+' because the Campaign is null');
            continue;
        }
        
        boolean isApplicableCampaign = false;
        boolean hasSignedUpOnWebsite = (contact.BZ_User_Id__c != null && contact.Signup_Date__c != null);
        boolean hasCourseCompleted = (campaign.IsActive == false && campaign.Status == 'Completed');
        System.debug('BZ_CampaignAssigned: hasCourseCompleted = '+hasCourseCompleted +', campaign.IsActive='+campaign.IsActive+', campaign.Status='+campaign.Status);
        System.debug('BZ_CampaignAssigned: cm.Candidate_Status__c = '+cm.Candidate_Status__c +', cm='+cm);
        if (campaign.Type == 'Leadership Coaches') {
            // Note: this is also set in a Workflow when the Lead is converted, 
            // but they may signup as one type but then we determine that they are really 
            // a different type so we still want to run this.
            if (hasCourseCompleted && cm.Candidate_Status__c == 'Confirmed'){
                contact.Volunteer_Information__c = 'Former LC';
            } else {
                contact.Volunteer_Information__c = 'LC Pipeline';
            }
            if (campaign.IsActive){ // If InActive, they may in other Active campaigns, so NOOP
                contact.Is_In_Active_Recruitment_Campaign__c = true;
            }
            isApplicableCampaign = true;
        } else if (campaign.Type == 'Program Participants'){
            // Ditto on above comment
            if (hasCourseCompleted && cm.Candidate_Status__c == 'Confirmed'){
                contact.Participant_Information__c = 'Program Alum';
            } else {
                contact.Participant_Information__c = 'Participant Pipeline';
            }
            if (campaign.IsActive){ // If InActive, they may in other Active campaigns, so NOOP
                contact.Is_In_Active_Recruitment_Campaign__c = campaign.IsActive;
            }
            isApplicableCampaign = true;
        } else if (campaign.Type == 'Volunteer'){
            // Ditto on above comment
            contact.Volunteer_Information__c = 'Temp Volunteer';
            if (campaign.IsActive){ // If InActive, they may in other Active campaigns, so NOOP
                contact.Is_In_Active_Recruitment_Campaign__c = true;
            }
            isApplicableCampaign = true;
        } else if (campaign.Type == 'Partners')
        {
            // Website signup as employer partner or university partner
            if ( contact.User_Type__c == 'Employer' || contact.User_Type__c == 'University')
            {
                isApplicableCampaign = true;
            }
        }
        else if (campaign.Type == 'Other' && contact.User_Type__c == 'Other')
        {
            // Website signup as "Other"
            isApplicableCampaign = true;
        }
        
        if (isApplicableCampaign)
        {   
            contactsToUpdate.add(contact);
            if (hasSignedUpOnWebsite)
            {
                contactIdsOfTasksToClose.add(contact.Id);
            }
            
            if (BZ_CopyCampaignMemberController.IsCopyCampaignMemberRunning)
            {
                // These are campaign members being moved from an old campaign to the
                // active campaign so we can reinvite them to apply to an upcoming program
                campaignMembersToCreateReinviteTasksFor.add(cm);
                System.Debug('BZ_CampaignAssigned: queuing up Reinvite email for '+ cm);
            }
            else if (BZ_MoveCampaignMemberController.IsMoveCampaignMemberRunning)
            {
                // NOOP: we just want to continue where we left off with the old campaign.
                System.Debug('BZ_CampaignAssigned: skipping email Task b/c Move To Campaign is running for CampaignMember = '+ cm);
            } 
            else
            {
                if (hasSignedUpOnWebsite)
                {
                  campaignMembersToCreateIntroTasksFor.add(cm);
                    System.Debug('BZ_CampaignAssigned: queuing up Intro email for '+cm);
                }
                else
                {
                    campaignMembersToCreateInviteTasksFor.add(cm);
                    System.Debug('BZ_CampaignAssigned: queuing up Invite email for '+cm);
                }
            }
        }
    }

    if (campaignMembersToCreateInviteTasksFor.size() > 0)
    {
        tasksToAdd = BZ_TaskFactory.createEmailTasks(campaignMembersToCreateInviteTasksFor, 
                                                 'Send Invite Email', 'Invite_Email_Template__c');
    }
    
    if (campaignMembersToCreateIntroTasksFor.size() > 0)
    {
        tasksToAdd = BZ_TaskFactory.createEmailTasks(campaignMembersToCreateIntroTasksFor, 
                                                 'Send Intro Email', 'Intro_Email_Template__c');
    }
    
    if (campaignMembersToCreateReinviteTasksFor.size() > 0)
    {
        tasksToAdd = BZ_TaskFactory.createEmailTasks(campaignMembersToCreateReinviteTasksFor, 
                                                 'Reinvite For New Program', 'Previous_Candidate_New_Invite__c');
    }
    
    Id senderId = UserInfo.getUserId();
    List<Task> tasksToClose = [SELECT Id, WhoId, WhatId, OwnerId, Status, Subject
                               FROM Task 
                               WHERE WhoId in :contactIdsOfTasksToClose AND       // Name - this task was created to handle a Lead, but the WhoId seems to be updated to the Contact ID after conversion
                               OwnerId = :senderId AND         // Assigned To
                               Status != 'Completed' AND
                               Subject LIKE '%New Website Signup%'
                              ];
    //System.debug('BZ_CampaignAssigned: tasksToClose.size() = ' + tasksToClose.size() );
    
    // If the task was already closed or deleted, it's a NOOP b/c this is a convenience behavior anyway.
    if (tasksToClose != null && tasksToClose.size() > 0)
    {
        Task taskToClose = tasksToClose.get(0);
        System.debug('BZ_CampaignAssigned: closing Task = ' + taskToClose );
        taskToClose.Status = 'Completed';
        tasksToUpdate.add(taskToClose);
    }
    
    update contactsToUpdate;
    update tasksToUpdate;
    insert tasksToAdd;
}
