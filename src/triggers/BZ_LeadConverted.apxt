trigger BZ_LeadConverted on Lead (before update) {
    //System.debug('BZ_LeadConverted: begin trigger');

    // When a Lead is converted to a Contact, grab the new ContactId and let
    // the bz.org platform know about it so that the User on the platform
    // stays tied to the Contact
    String changes = '';
    Map<Id, BZ_LeadConvertedState> contactsToUpdateStateMap = new Map<Id, BZ_LeadConvertedState>();

    for (Lead lead : Trigger.new) { 
        if(lead.IsConverted != Trigger.oldMap.get(lead.Id).IsConverted) { 
            if (lead.IsConverted) { 
                System.debug('BZ_LeadConverted: processing converted lead = '+lead);
                changes += ',' + lead.Id + ':' + lead.ConvertedContactId; 

                String company = null;
                String industry = null;
                String phone = null;
                if (lead.Company != null && lead.Company != '')
                {
                    // Normally, a Lead.Company field is mapped to Contact.Account Name by default.
                    // However, the NPSP uses what it calls the Household Account Model and 
                    // automatically populates Contact.AccountName with "<LastName> Household", 
                    // no matter what is in Lead.Company.  
                    // See https://powerofus.force.com/articles/Resource/NPSP-What-is-an-Account-Model#household
                    // For this reason, we use a custom Contact.Company__c to store the Company that a Lead 
                    // works for on a Contact.
                    company = lead.Company;
                }

                if (lead.Industry != null && lead.Industry != '')
                {
                    industry = lead.Industry;
                }

                if (lead.Phone != null && lead.Phone != '')
                {
                    phone = lead.Phone;
                }

                if (company != null || industry != null || phone != null)
                {
                    contactsToUpdateStateMap.put(lead.ConvertedContactId, new BZ_LeadConvertedState(company, industry, phone));
                }
            } 
        } 
    }


    if (contactsToUpdateStateMap.size() > 0)
    {
        List<Contact> contactsToUpdate = new List<Contact>([SELECT Id, Company__c, Industry__c, HomePhone FROM Contact WHERE Id in :contactsToUpdateStateMap.keySet()]);

        for (Contact contact : contactsToUpdate)
        {
            BZ_LeadConvertedState state = contactsToUpdateStateMap.get(contact.Id);
            if (state.company != null)
            {
                System.debug('BZ_LeadConverted: setting Contact.Company__c to ' + state.company);
                contact.Company__c = state.company;
            }
            if (state.industry != null)
            {
                System.debug('BZ_LeadConverted: setting Contact.Industry__c to ' + state.industry);
                contact.Industry__c = state.industry;
            }
            if(state.phone != null)
            {
                // There is some weirdness with phones.  The actual Phone field is not shown
                // in the page layout, but there are some Workflow rules that update the 
                // HomePhone, OtherPhone, etc using the PreferredPhone selection whenever
                // the backing Phone field is set.  We rely on those to copy over the 
                // phone to the UI.
                System.debug('BZ_LeadConverted: setting Contact.Phone to ' + state.phone);
                contact.Phone = state.phone;
            }
        }
        update contactsToUpdate;
    }

    if(changes.length() > 0)
        BZ_Notifications.recordConvertedLeads(changes);
}
