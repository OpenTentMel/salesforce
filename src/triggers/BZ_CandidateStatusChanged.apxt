trigger BZ_CandidateStatusChanged on CampaignMember (before update) {
    System.Debug('BZ_CandidateStatusChanged: begin trigger');
    
    Set<Id> contactIds = new Set<Id>();
    Set<Id> campaignIds = new Set<Id>();
    for (CampaignMember cm : Trigger.new)
    {        
        //System.Debug('BZ_CandidateStatusChanged: adding ContactId='+cm.ContactId + ' to contactIds ' + contactIds);
        contactIds.add(cm.ContactId);
        //System.Debug('BZ_CandidateStatusChanged: adding CampaignId='+cm.CampaignId + ' to campaignIds ' + campaignIds);
        campaignIds.add(cm.CampaignId);
    }
    Map<Id, Contact> contactMap = new Map<Id, Contact>([SELECT Id, Volunteer_Information__c, Participant_Information__c, User_Type__c FROM Contact WHERE Id in :contactIds]);
    Map<Id, Campaign> campaignMap = new Map<Id, Campaign>([SELECT Id, Type FROM Campaign WHERE Id in :campaignIds]);
    //System.Debug('BZ_CandidateStatusChanged: contactMap='+contactMap);
    //System.Debug('BZ_CandidateStatusChanged: campaignMap='+campaignMap);
    
    List<CampaignMember> campaignMembersToCreateTasksFor = new List<CampaignMember>();
    
    for (CampaignMember cm : Trigger.new)
    {
        if (Trigger.oldMap.get(cm.Id).Candidate_Status__c != cm.Candidate_Status__c)
        {
            List<Task> tasksToUpdate = new List<Task>();
            List<Contact> contactsToUpdate = new List<Contact>();
            
            boolean closeReviewAppTask = false;
            
            // If the candidate status is changed to Interview Requested, 
            // queue up a task with the Email Template To Send set to notify 
            // the user that we are requesting an interview with them.
            //System.debug('BZ_CandidateStatusChanged: cm.Candidate_Status__c=' + cm.Candidate_Status__c);
            if (cm.Candidate_Status__c == 'Interview Requested')
            {
                closeReviewAppTask = true;
                campaignMembersToCreateTasksFor.add(cm);
            }
            else if(cm.Candidate_Status__c == 'Accepted')
            {   
                closeReviewAppTask = true;
                
                Campaign campaign = campaignMap.get(cm.CampaignId);
                //System.debug('BZ_CandidateStatusChanged: campaign='+campaign);
                Contact contact = contactMap.get(cm.ContactId);
                //System.debug('BZ_CandidateStatusChanged: contact='+contact); 
        
                if (campaign.Type == 'Leadership Coaches') {
                    contact.Volunteer_Information__c = 'Current LC';
                    contactsToUpdate.add(contact);
                } else if (campaign.Type == 'Program Participants'){
                    contact.Participant_Information__c = 'Participant';
                    contactsToUpdate.add(contact);
                }
            } else if(cm.Candidate_Status__c == 'Not Accepted' || cm.Candidate_Status__c == 'Waitlisted')
            {
                closeReviewAppTask = true;
            }
            
            if (closeReviewAppTask)
            {
                System.debug('BZ_CandidateStatusChanged: closing task to Review App');
                List<Task> reviewAppTasks = [SELECT Id, Status FROM Task 
                                             WHERE WhoId=:cm.ContactId AND 
                                                   WhatId=:cm.CampaignId AND
                                                   Status != 'Completed' AND
                                                   Subject LIKE '%Review submitted application for%'];
                if (reviewAppTasks != null && reviewAppTasks.size() > 0)
                {
                    Task reviewAppTask = reviewAppTasks.get(0);
                    System.debug('BZ_CampaignAssigned: reviewAppTask = ' + reviewAppTask);
                    reviewAppTask.Status = 'Completed';
                    tasksToUpdate.add(reviewAppTask);
                }
            }
            
            
            update contactsToUpdate;
            update tasksToUpdate;
        }
    }
    
    if (campaignMembersToCreateTasksFor.size() > 0)
    {
        insert BZ_TaskFactory.createEmailTasks(campaignMembersToCreateTasksFor, 
                                               'Send Interview Request Email', 
                                               'App_Interview_Requested_Email_Template__c');
    }
}
