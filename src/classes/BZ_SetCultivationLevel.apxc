/*
 * Helper to set the Cultivation Level and Last Interaction Date based on the Task's
 * Interaction Type
 */
public class BZ_SetCultivationLevel {
    private List<Task> m_tasksToProcess;
    
    public BZ_SetCultivationLevel(List<Task> tasksToProcess){
        System.assertNotEquals(null, tasksToProcess);
        m_tasksToProcess =  tasksToProcess;   
    }
    
    public void Run(){
        Set<Id> contactIdsWeHaveMet = new Set<Id>();
        Set<Id> contactIdsWeHaveReachedOutTo = new Set<Id>();
        Set<Id> otherContactIdsWeHaveInteractedWith = new Set<Id>();
        for(Task task : m_tasksToProcess){
            
            if (task.Status == 'Completed')
            {
                System.Debug('BZ_SetCultivationLevel: processing Completed task: ' + task);
                
                // When we send queued emails, the built in Salesforce email sending mechanism
                // inserts a new completed task (and our code deletes the queued task that had
                // the Interaction Type set).  This adjusts the interaction type for these.
                if (task.Subject.startsWith('Email:')){
                    task.Interaction_Type__c = 'Email';
                }
    
                // All other Interaction_Type__c values other than Text correspond to those
                // that we have met in some way.
                if (!String.isEmpty(task.Interaction_Type__c) &&
                    task.Interaction_Type__c != '--None--')
                {
                    //System.Debug('BZ_TaskClosed: adding Contact Id '+ task.WhoId + ' to contactIdsWeHaveMet');
                    if (task.Interaction_Type__c == 'Email' || task.Interaction_Type__c == 'Voicemail' || 
                        task.Interaction_Type__c == 'Text Message'){
                        contactIdsWeHaveReachedOutTo.add(task.WhoId);
                    }
                    else if (task.Interaction_Type__c == 'Phone Call' || task.Interaction_Type__c == 'Camera to Camera Virtual Meeting' || 
                             task.Interaction_Type__c == '1:1 In-Person Meeting' || task.Interaction_Type__c == 'Small Group In-Person Meeting') {
                        contactIdsWeHaveMet.add(task.WhoId);
                    }
                    else {
                        // Note: "Interaction at Larger Function" and "Attended BZ Function" are left
                        // blank b/c "Met" means we had a conversation we set up to talk about a specific thing and
                        // "Reached Out" means we contacted them to make a specific ask.  However, these two are more
                        // analogous to someone coming to our website and hearing about us 
                        // (e.g. a passing conversation at a larger function) but we haven't actively started 
                        // cultivating them yet.
                        otherContactIdsWeHaveInteractedWith.add(task.WhoId);
                    }
                }
            }
        }
    
        List<Contact> contactsWeHaveMet = new List<Contact>([SELECT Id, Name, Cultivation_Level__c, Last_Interaction_Date__c FROM Contact WHERE Id in :contactIdsWeHaveMet]);
        for (Contact c : contactsWeHaveMet)
        {
            c.Cultivation_Level__c = 'Met';
            c.Last_Interaction_Date__c = DateTime.now();
        }
        if (!contactsWeHaveMet.isEmpty())
        {
            update contactsWeHaveMet;
        }
        
        List<Contact> contactsWeHaveReachedOutTo = new List<Contact>([SELECT Id, Name, Cultivation_Level__c, Last_Interaction_Date__c FROM Contact WHERE Id in :contactIdsWeHaveReachedOutTo]);
        for (Contact c : contactsWeHaveReachedOutTo)
        {
            if (c.Cultivation_Level__c != 'Met'){ // Met trumps Reached Out.
                c.Cultivation_Level__c = 'Reached Out';
            }
            c.Last_Interaction_Date__c = DateTime.now();
        }
        if (!contactsWeHaveReachedOutTo.isEmpty())
        {
            update contactsWeHaveReachedOutTo;
        }
        
        List<Contact> otherContactsWeHaveInteractedWith = new List<Contact>([SELECT Id, Name, Last_Interaction_Date__c FROM Contact WHERE Id in :otherContactIdsWeHaveInteractedWith]);
        for (Contact c : otherContactsWeHaveInteractedWith)
        {
            c.Last_Interaction_Date__c = DateTime.now();
        }
        if (!otherContactsWeHaveInteractedWith.isEmpty())
        {
            update otherContactsWeHaveInteractedWith;
        }
    }
}
