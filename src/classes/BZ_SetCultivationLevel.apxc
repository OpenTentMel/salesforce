/*
 * Helper to set the Cultivation Level and Last Interaction Date based on the Task's
 * Interaction Type
 */
public class BZ_SetCultivationLevel {
    private List<Task> m_tasksToProcess;
    
    public BZ_SetCultivationLevel(List<Task> tasksToProcess){
        System.assertNotEquals(null, tasksToProcess);
        m_tasksToProcess =  tasksToProcess;   
    }
    
    public void Run(){
        
        if (BZ_CloseRecruitmentController.IsCloseRecruitmentRunning)
        {
            // NOOP: we're snapshotting the campaign and don't need to update the Cultivation_Level__c
            // since it's cloned.  When we close large campaigns, all the trigger logic causes
            // Apex CPU time limit exceptions.
            System.Debug('BZ_SetCultivationLevel: NOOP because were running BZ_CloseRecruitmentController.IsCloseRecruitmentRunning');
            return;
        }
            
        Set<Id> contactIdsWeHaveMet = new Set<Id>();
        Set<Id> contactIdsWeHaveReachedOutTo = new Set<Id>();
        Set<Id> otherContactIdsWeHaveInteractedWith = new Set<Id>();
        Set<Id> allContactIdsWeveInteractedWith = new Set<Id>();
        Map<Id, Set<Id>> contactIdToRelevantCampaignIds = new Map<Id, Set<Id>>();
        for(Task task : m_tasksToProcess){
            
            if (task.Status == 'Completed')
            {
                System.Debug('BZ_SetCultivationLevel: processing Completed task: ' + task);
                
                // When we send queued emails, the built in Salesforce email sending mechanism
                // inserts a new completed task (and our code deletes the queued task that had
                // the Interaction Type set).  This adjusts the interaction type for these so the
                // logic below picks it up.  Note: we should probably actually update the new
                // Email task but we don't really need it for now and that is complicated
                // b/c it would trigger calling this code again so we'll punt for now.
                if (task.Subject.startsWith('Email:')){
                    task.Interaction_Type__c = 'Email';
                }
                
                if (task.WhoId != null &&
                    !String.isEmpty(task.Interaction_Type__c) &&
                    task.Interaction_Type__c != '--None--')
                {
                    allContactIdsWeveInteractedWith.add(task.WhoId);
                    
                    // If the Related To field (aka WhatId) is a Campaign, add that to
                    // the list of relevatn campaign IDs associated with the contact
                    if (task.WhatId != null && 
                        task.WhatId.getSObjectType().getDescribe().getName() == 'Campaign')
                    {
                        if (!contactIdToRelevantCampaignIds.containsKey(task.WhoId)){
                            contactIdToRelevantCampaignIds.put(task.WhoId, new Set<Id>());
                        }
                        contactIdToRelevantCampaignIds.get(task.WhoId).add(task.WhatId);
                    }
                    
                    //System.Debug('BZ_TaskClosed: adding Contact Id '+ task.WhoId + ' to contactIdsWeHaveMet');
                    if (task.Interaction_Type__c == 'Voicemail' || 
                        task.Interaction_Type__c == 'Text Message'){
                        contactIdsWeHaveReachedOutTo.add(task.WhoId);
                    }
                    else if (task.Interaction_Type__c == 'Phone Call' || task.Interaction_Type__c == 'Camera to Camera Virtual Meeting' || 
                             task.Interaction_Type__c == '1:1 In-Person Meeting' || task.Interaction_Type__c == 'Small Group In-Person Meeting') {
                        contactIdsWeHaveMet.add(task.WhoId);
                    }
                    else {
                        // Note: "Interaction at Larger Function" and "Attended BZ Function" are left
                        // blank b/c "Met" means we had a conversation we set up to talk about a specific thing and
                        // "Reached Out" means we contacted them to make a specific ask.  However, these two are more
                        // analogous to someone coming to our website and hearing about us 
                        // (e.g. a passing conversation at a larger function) but we haven't actively started 
                        // cultivating them yet.
                        // 
                        // Also, task.Interaction_Type__c == 'Email' is left blank since we email
                        // people as part of the signup flow.  Ideally, we would distinguish between normal
                        // signup flow related emails and explicit, manually created emails
                        // but for now we'll just leave them blank.
                        otherContactIdsWeHaveInteractedWith.add(task.WhoId);
                    }
                }
            }
        }
        
        if (allContactIdsWeveInteractedWith.size() <= 0)
        {
            System.debug('BZ_SetCultivationLevel: exiting because no tasks with Interaction Types found');
            return;
        }

        Map<Id, Contact> contactIdToContactMap = new Map<Id, Contact>([SELECT Id, Name, Cultivation_Level__c, Last_Interaction_Date__c FROM Contact 
                                                                       WHERE Id in :allContactIdsWeveInteractedWith]);
        for (Contact c : contactIdToContactMap.values()){
            if (contactIdsWeHaveMet.contains(c.Id)){
                 c.Cultivation_Level__c = 'Met';
                 c.Last_Interaction_Date__c = DateTime.now();
            } 
            else if (contactIdsWeHaveReachedOutTo.contains(c.Id)){
                if (c.Cultivation_Level__c != 'Met'){ // Met trumps Reached Out.
                    c.Cultivation_Level__c = 'Reached Out';
                }
                c.Last_Interaction_Date__c = DateTime.now();
            } else if (otherContactIdsWeHaveInteractedWith.contains(c.Id)){
                c.Last_Interaction_Date__c = DateTime.now();
            }
            System.debug('BZ_SetCultivationLevel: setting Contact[Last_Interaction_Date__c = ' + c.Last_Interaction_Date__c.getTime() + ', Cultivation_Level__c = ' + c.Cultivation_Level__c+']');
        }
        
        update contactIdToContactMap.values();

        // Note: we also have to grab the fields used by the BZ Copy Contact Info To Campaign Member
        // Process Builder flow b/c it was generating the following during unit tests: 
        // System.DmlException: Update failed. First exception on row 0 with id 00v17000003lt45AAA; 
        // first error: CANNOT_EXECUTE_FLOW_TRIGGER, The record couldnâ€™t be saved because it 
        // failed to trigger a flow.
        Map<Id, CampaignMember> campaignMembersToUpdate = new Map<Id, CampaignMember>(
            [SELECT Id, ContactId, CampaignId, Last_Interaction_Date__c, Cultivation_Level__c,
             Anticipated_Graduation_Semester__c, Anticipated_Graduation__c, Signup_Date__c, Started_College__c, Enrollment_Semester__c
             FROM CampaignMember WHERE ContactId in :allContactIdsWeveInteractedWith]);

        // Note: if the task.WhatId (aka Related To) field is set to a campaign, 
        // update the cultivation level on that campaign but don't just blindly do 
        // it for all campaigns they are in.
        if (!campaignMembersToUpdate.isEmpty()){
            System.debug('BZ_SetCultivationLevel: potential campaignMembersToUpdate.size() = ' + campaignMembersToUpdate.size());
            for (CampaignMember cm : campaignMembersToUpdate.values()){
                Set<Id> relevantCampaigns = contactIdToRelevantCampaignIds.get(cm.ContactId);
                if (relevantCampaigns != null && relevantCampaigns.contains(cm.CampaignId)){
                    Contact c = contactIdToContactMap.get(cm.ContactId);
                    cm.Last_Interaction_Date__c = c.Last_Interaction_Date__c;
                    cm.Cultivation_Level__c = c.Cultivation_Level__c;
                    System.debug('BZ_SetCultivationLevel: updating Campaign Member[Last_Interaction_Date__c = ' + cm.Last_Interaction_Date__c.getTime() + ', Cultivation_Level__c = ' + cm.Cultivation_Level__c+']');
                }
                else{
                    campaignMembersToUpdate.remove(cm.Id);
                }
            }
            System.debug('BZ_SetCultivationLevel: actual campaignMembersToUpdate.size() = ' + campaignMembersToUpdate.size() + ' after removing irrelevant campaigns');
            update campaignMembersToUpdate.values();
        }
    }
}
