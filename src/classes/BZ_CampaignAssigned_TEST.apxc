@isTest 
private class BZ_CampaignAssigned_TEST {
    static testMethod void validateLCCampaignAssigned() {
        System.debug('BZ_CampaignAssigned_TEST.validateLCCampaignAssigned - begin');
        // This also create the task that we want to test if it gets closed by the trigger.
        Datetime signupDate = Datetime.now();
        String anticipatedGraduation = '2006';
        String anticipatedGraduationSemester = 'Spring';
        String startedCollege = '1999';
        String collegeEnrollmentSemester = 'Fall';
        Lead l = new Lead(OwnerId=UserInfo.getUserId(), User_Type__c='Leadership Coach', Signup_Date__c=signupDate, Anticipated_Graduation__c=anticipatedGraduation, Anticipated_Graduation_Semester__c=anticipatedGraduationSemester, Started_College__c=startedCollege, Enrollment_Semester__c=collegeEnrollmentSemester, BZ_User_Id__c=1234, Account_Activated__c=true, LeadSource='Website Signup', FirstName='Someone', LastName='New', Company='Someone New (individual)', Status='Open');
        insert l;
        
        // THis happens automatically now on lead insertion above.
        // Convert Lead to Contact to get everything setup properly (e.g. Lead.ConvertedContactId must be set).
        /*Database.LeadConvert lc = new Database.LeadConvert();
        lc.setLeadId(l.id);
        LeadStatus convertStatus = [Select Id, MasterLabel FROM LeadStatus WHERE IsConverted=true LIMIT 1];
        lc.setConvertedStatus(convertStatus.MasterLabel);
        Database.LeadConvertResult lcr = Database.convertLead(lc); */    
        Lead updatedLead = [SELECT Id, ConvertedContactId FROM Lead Where Id = :l.Id];
        Contact contact = [SELECT Id, Signup_Date__c, Anticipated_Graduation__c, Anticipated_Graduation_Semester__c, Started_College__c, Enrollment_Semester__c FROM Contact WHERE Id = :updatedLead.ConvertedContactId];

        // I think this happens in the ruby code when the lead is converted?  Going to have to check
        // how these fields get from lead to contact.
        contact.Anticipated_Graduation__c = anticipatedGraduation;
        contact.Anticipated_Graduation_Semester__c = anticipatedGraduationSemester;
        contact.Signup_Date__c = signupDate;
        contact.Started_College__c = startedCollege;
        contact.Enrollment_Semester__c = collegeEnrollmentSemester;
        update contact;
        
        Contact campaignOwner = new Contact(FirstName='Test', LastName='CampaignOwner1', OwnerId=userInfo.getUserId());
        insert campaignOwner;

        // Note: the Campaign.OwnerId refers to the User, so we need to use campaignOwner.OwnerId instead of Id.  See the child relationship of the User object.
        Campaign campaign = BZ_CampaignFactory_TEST.create(campaignOwner.OwnerId, 'Leadership Coaches');
        campaign.IsActive = true;
        insert campaign;
        
        CampaignMember cm = new CampaignMember();
        cm.CampaignId=campaign.Id;
        cm.ContactId=contact.Id;
        
        // This fires the trigger we're testing.
        test.startTest();
        insert cm;
        test.stopTest();
        
        CampaignMember updatedCm = [SELECT Id, ContactId, CampaignId, Signup_Date__c, Anticipated_Graduation__c, Anticipated_Graduation_Semester__c, Started_College__c, Enrollment_Semester__c FROM CampaignMember WHERE Id=:cm.Id];
        Contact updatedContact = [SELECT Id, Volunteer_Information__c, Signup_Date__c, Anticipated_Graduation__c, Anticipated_Graduation_Semester__c, Started_College__c, Enrollment_Semester__c, BZ_Region__c FROM Contact WHERE Id=:updatedCm.ContactId];
        System.assert(updatedContact.Volunteer_Information__c == 'LC Pipeline', 'When a Contact is added to an LC Campaign, their Leadership Coach Information should be set.');

        // Not sure why this isn't working but the BZ_Copy_Contact_Info_To_Campaign_Member flow in the
        // Process Builder should have copied over these values.
        /*System.assert(updatedCm.Signup_Date__c == signupDate, 'When a Contact is added to an LC Campaign, their Signup Date should be set.');
        System.assert(updatedCm.Anticipated_Graduation__c == anticipatedGraduation, 'When a Contact is added to an LC Campaign, their Anticipated_Graduation__c should be set.');
        System.assert(updatedCm.Anticipated_Graduation_Semester__c == anticipatedGraduationSemester, 'When a Contact is added to an LC Campaign, their Anticipated_Graduation_Semester__c should be set.');
        System.assert(updatedCm.Started_College__c == startedCollege, 'When a Contact is added to an LC Campaign, their Started_College__c should be set.');
        System.assert(updatedCm.Enrollment_Semester__c == collegeEnrollmentSemester, 'When a Contact is added to an LC Campaign, their Enrollment_Semester__c should be set.');*/

        List<Task> resultingTasks = [SELECT Id, WhoId, WhatId, Interaction_Type__c FROM Task
                                     WHERE WhoId=:updatedCm.ContactId AND
                                           WhatId=:updatedCm.CampaignId AND
                                           Subject LIKE '%Send Intro Email%'];
        System.assert(resultingTasks.size()==1, 'Expected Task to be created to Send Intro Email to LCs');
        System.assert(resultingTasks[0].Interaction_Type__c == 'Email','Expected resultingTasks[0].Interaction_Type__c == Email, not ' + resultingTasks[0].Interaction_Type__c);
        // We changed students and volunteers to automatically be converted and added to a campaign.
        /*List<Task> resultingClosedTasks = [SELECT Id, Status FROM Task
                                           WHERE WhoId=:updatedContact.Id AND
                                           Subject LIKE '%New Website Signup%'];
        System.assert(resultingClosedTasks.get(0).Status == 'Completed', 'Expected Task to deal with New Website Signup\'s to be closed automatically after converting them and assigning them to a Campaign.');*/
        
        System.assertEquals(BZ_CampaignFactory_TEST.DEFAULT_BZ_REGION, updatedContact.BZ_Region__c, 'Assigning to a Campaign should set the BZ_Region on the Contact');
    }
    
    static testMethod void validateUniversityCampaignAssigned() {
        System.debug('BZ_CampaignAssigned_TEST.validateUniversityCampaignAssigned - begin');
        List<Contact> contactsToInsert = new List<Contact>();
        Contact campaignOwner = new Contact(FirstName='Test', LastName='CampaignOwner2', OwnerId=userInfo.getUserId());
        contactsToInsert.add(campaignOwner);
        Contact contact = new Contact(FirstName='Test', LastName='User2', User_Type__c='University', Signup_Date__c=Datetime.now(), BZ_User_Id__c=1234);
        contactsToInsert.add(contact);
        insert contactsToInsert;
        
        // Note: the Campaign.OwnerId refers to the User, so we need to use campaignOwner.OwnerId instead of Id.  See the child relationship of the User object.
        Campaign campaign = BZ_CampaignFactory_TEST.create(campaignOwner.OwnerId, 'Partners');
        campaign.IsActive = true;
        insert campaign;
        
        CampaignMember cm = new CampaignMember();
        cm.CampaignId=campaign.Id;
        cm.ContactId=contact.Id;
        
        // This fires the trigger we're testing.
        insert cm;
        
        CampaignMember updatedCm = [SELECT Id, ContactId, CampaignId FROM CampaignMember WHERE Id=:cm.Id];
        List<Task> resultingTasks = [SELECT Id, WhoId, WhatId FROM Task
                                     WHERE WhoId=:updatedCm.ContactId AND
                                           WhatId=:updatedCm.CampaignId AND
                                           Subject LIKE '%Send Intro Email%'];
        System.assert(resultingTasks.size()==1, 'Expected Task to be created to Send Intro Email to University Partners');
    }
    
    static testMethod void validateOtherCampaignAssigned() {
        System.debug('BZ_CampaignAssigned_TEST.validateOtherCampaignAssigned - begin');
        Contact campaignOwner = new Contact(FirstName='Test', LastName='CampaignOwner3', OwnerId=userInfo.getUserId());
        insert campaignOwner;
        
        // Mimic someone who signed up and chose "Other" as "I am interested in..."
        Contact contact = new Contact(FirstName='Test', LastName='User3', Signup_Date__c=Datetime.now(), BZ_User_Id__c=1234, User_Type__c='Other');
        insert contact;
        
        // Note: the Campaign.OwnerId refers to the User, so we need to use campaignOwner.OwnerId instead of Id.  See the child relationship of the User object.
        Campaign campaign = BZ_CampaignFactory_TEST.create(campaignOwner.OwnerId, 'Other');
        campaign.IsActive = true;
        insert campaign;
        
        CampaignMember cm = new CampaignMember();
        cm.CampaignId=campaign.Id;
        cm.ContactId=contact.Id;
        
        // This fires the trigger we're testing.
        insert cm;
        
        CampaignMember updatedCm = [SELECT Id, ContactId, CampaignId FROM CampaignMember WHERE Id=:cm.Id];
        List<Task> resultingTasks = [SELECT Id, WhoId, WhatId FROM Task
                                     WHERE WhoId=:updatedCm.ContactId AND
                                           WhatId=:updatedCm.CampaignId AND
                                           Subject LIKE '%Send Intro Email%'];
        System.assert(resultingTasks.size()==1, 'Expected Task to be created to Send Intro Email to Other Campaigns');
        Contact updatedContact = [SELECT Id, BZ_Region__c FROM Contact WHERE Id=:contact.Id];
        System.assertEquals(BZ_CampaignFactory_TEST.DEFAULT_BZ_REGION, updatedContact.BZ_Region__c, 'Assigning to a Campaign should set the BZ_Region on the Contact');
    }
    
    static testMethod void validateReferrealProgramCampaignAssigned() {
        System.debug('BZ_CampaignAssigned_TEST.validateReferrealProgramCampaignAssigned - begin');
        Contact campaignOwner = new Contact(FirstName='Test', LastName='CampaignOwner4', OwnerId=userInfo.getUserId());
        insert campaignOwner;
        
        // Mimic someone who we manually entered and assigned to a Referral Program campaign.
        Contact contact = new Contact(FirstName='Test', LastName='User4');
        insert contact;
        
        // Note: the Campaign.OwnerId refers to the User, so we need to use campaignOwner.OwnerId instead of Id.  See the child relationship of the User object.
        Campaign campaign = BZ_CampaignFactory_TEST.create(campaignOwner.OwnerId, 'Referral Program');
        insert campaign;
        
        CampaignMember cm = new CampaignMember();
        cm.CampaignId=campaign.Id;
        cm.ContactId=contact.Id;
        
        // This fires the trigger we're testing.
        insert cm;
        
        CampaignMember updatedCm = [SELECT Id, ContactId, CampaignId FROM CampaignMember WHERE Id=:cm.Id];
        List<Task> resultingTasks = [SELECT Id, WhoId, WhatId FROM Task
                                     WHERE WhoId=:updatedCm.ContactId AND
                                           WhatId=:updatedCm.CampaignId AND
                                           Subject LIKE '%Send Intro Email%'];
        System.assert(resultingTasks.size()==0, 'Expected NO Task to be created to Send Intro Email to a Referral Program Campaigns');
    }
    
    static testMethod void validateParticipantCampaignAssigned() {
        System.debug('BZ_CampaignAssigned_TEST.validateParticipantCampaignAssigned - begin');
        Contact campaignOwner = new Contact(FirstName='Test', LastName='CampaignOwner5', OwnerId=userInfo.getUserId());
        insert campaignOwner;
        
        // Mimic someone who we manually entered and added to a Participant Campaign. e.g. no signup date or BZ User Id
        Contact contact = new Contact(FirstName='Test', LastName='User5', User_Type__c='Undergrad');
        insert contact;
        // Mimic someone who had already signed up on the website.
        Contact existingContact = new Contact(FirstName='Test2', LastName='User6', User_Type__c='Undergrad', BZ_User_Id__c=1234, Signup_Date__c=DateTime.now());
        insert existingContact;
        
        // Note: the Campaign.OwnerId refers to the User, so we need to use campaignOwner.OwnerId instead of Id.  See the child relationship of the User object.
        Campaign campaign = BZ_CampaignFactory_TEST.create(campaignOwner.OwnerId, 'Program Participants');
        campaign.IsActive = true;
        insert campaign;
        
        List<CampaignMember> cms = new List<CampaignMember>();
        CampaignMember cm = new CampaignMember();
        cm.CampaignId=campaign.Id;
        cm.ContactId=contact.Id;
        cms.add(cm);
        
        CampaignMember cmExisting = new CampaignMember();
        cmExisting.CampaignId=campaign.Id;
        cmExisting.ContactId=existingContact.Id;
        cms.add(cmExisting);
        
        // This fires the trigger we're testing.
        insert cms;
        
        // Brand new prospects get the Invite email directing them to the signup form
        CampaignMember updatedCm = [SELECT Id, ContactId, CampaignId FROM CampaignMember WHERE Id=:cm.Id];
        List<Task> resultingTasks = [SELECT Id, WhoId, WhatId FROM Task
                                     WHERE WhoId=:updatedCm.ContactId AND
                                           WhatId=:updatedCm.CampaignId AND
                                           Subject LIKE '%Send Invite Email%'];
        System.assert(resultingTasks.size()==1, 'Expected Task to be created to Send Invite Email to a Program Participants that didnt signup');
        
        // People who have accounts are sent the Intro email telling them to log back in.
        CampaignMember updatedExistingCm = [SELECT Id, ContactId, CampaignId FROM CampaignMember WHERE Id=:cmExisting.Id];
        List<Task> resultingTasks2 = [SELECT Id, WhoId, WhatId FROM Task
                                     WHERE WhoId=:updatedExistingCm.ContactId AND
                                           WhatId=:updatedExistingCm.CampaignId AND
                                           Subject LIKE '%Send Intro Email%'];
        System.assert(resultingTasks2.size()==1, 'Expected Task to be created to Send Intro Email to a Program Participants that had already signed up');
    }
    
    static testMethod void validateMentorCampaignAssigned() {
        System.debug('BZ_CampaignAssigned_TEST.validateMentorCampaignAssigned - begin');
        List<Contact> contactsToInsert = new List<Contact>();
        Contact campaignOwner = new Contact(FirstName='Test', LastName='CampaignMentorOwner2', OwnerId=userInfo.getUserId());
        contactsToInsert.add(campaignOwner);
        Contact contact = new Contact(FirstName='Test', LastName='MentorUser1', User_Type__c='Mentor', Signup_Date__c=Datetime.now(), BZ_User_Id__c=1234);
        contactsToInsert.add(contact);
        Contact contactConfirmed = new Contact(FirstName='Test', LastName='MentorUser2', User_Type__c='Mentor', Signup_Date__c=Datetime.now(), BZ_User_Id__c=12345);
        contactsToInsert.add(contactConfirmed);
        Contact contactOptedOut = new Contact(FirstName='Test', LastName='MentorUser3', User_Type__c='Mentor', Signup_Date__c=Datetime.now(), BZ_User_Id__c=12344);
        contactsToInsert.add(contactOptedOut);
        insert contactsToInsert;
        
        // Note: the Campaign.OwnerId refers to the User, so we need to use campaignOwner.OwnerId instead of Id.  See the child relationship of the User object.
        Campaign campaign = BZ_CampaignFactory_TEST.create(campaignOwner.OwnerId, 'Mentor');
        campaign.IsActive = true;
        insert campaign;
        
        List<CampaignMember> campaignMembersToInsert = new List<CampaignMember>();
        CampaignMember cm = new CampaignMember();
        cm.CampaignId=campaign.Id;
        cm.ContactId=contact.Id;
        campaignMembersToInsert.add(cm);

        CampaignMember cmConfirmed = new CampaignMember();
        cmConfirmed.CampaignId=campaign.Id;
        cmConfirmed.ContactId=contactConfirmed.Id;
        cmConfirmed.Candidate_Status__c = 'Confirmed';
        campaignMembersToInsert.add(cmConfirmed);
        
        CampaignMember cmOptedOut = new CampaignMember();
        cmOptedOut.CampaignId=campaign.Id;
        cmOptedOut.ContactId=contactOptedOut.Id;
        cmOptedOut.Candidate_Status__c = 'Opted Out';
        cmOptedOut.Opted_Out_Reason__c = 'No Time';
        campaignMembersToInsert.add(cmOptedOut);
        
        // This fires the trigger we're testing.
        insert campaignMembersToInsert;
        
        Contact updatedContact = [SELECT Id, Mentor_Information__c, Candidate_Status__c FROM Contact WHERE Id=:cm.ContactId];
        System.assert(updatedContact.Mentor_Information__c == 'Prospect', 'When a Contact is Assigned to a Mentor campaign, their Mentor_Information__c should be set.');
                
        CampaignMember updatedCm = [SELECT Id, ContactId, CampaignId FROM CampaignMember WHERE Id=:cm.Id];
        List<Task> resultingTasks = [SELECT Id, WhoId, WhatId FROM Task
                                     WHERE WhoId=:updatedCm.ContactId AND
                                           WhatId=:updatedCm.CampaignId AND
                                           Subject LIKE '%Send Intro Email%'];
        System.assert(resultingTasks.size()==0, 'Expected NO Task to be created to Send Intro Email to Mentors');
        
        Contact updatedContactConfirmed = [SELECT Id, Mentor_Information__c, Candidate_Status__c FROM Contact WHERE Id=:cmConfirmed.ContactId];
        System.assert(updatedContactConfirmed.Mentor_Information__c == 'Current', 'When a Confirmed Contact is Assigned to a Mentor campaign, their Mentor_Information__c should be set to Current.');
                
        CampaignMember updatedCmConfirmed = [SELECT Id, ContactId, CampaignId FROM CampaignMember WHERE Id=:cmConfirmed.Id];
        resultingTasks = [SELECT Id, WhoId, WhatId FROM Task
                                     WHERE WhoId=:updatedCmConfirmed.ContactId AND
                                           WhatId=:updatedCmConfirmed.CampaignId AND
                                           Subject LIKE '%Send Intro Email%'];
        System.assert(resultingTasks.size()==0, 'Expected NO Task to be created to Send Intro Email to Mentors');
        
        Contact updatedContactOptedOut = [SELECT Id, Mentor_Information__c, Candidate_Status__c FROM Contact WHERE Id=:cmOptedOut.ContactId];
        System.assert(updatedContactOptedOut.Mentor_Information__c == 'Opted Out', 'When a Opted Out Contact is Assigned to a Mentor campaign, their Mentor_Information__c should be set to Opted Out.');
                
        CampaignMember updatedCmOptedOut = [SELECT Id, ContactId, CampaignId FROM CampaignMember WHERE Id=:cmOptedOut.Id];
        resultingTasks = [SELECT Id, WhoId, WhatId FROM Task
                                     WHERE WhoId=:updatedCmOptedOut.ContactId AND
                                           WhatId=:updatedCmOptedOut.CampaignId AND
                                           Subject LIKE '%Send Intro Email%'];
        System.assert(resultingTasks.size()==0, 'Expected NO Task to be created to Send Intro Email to Mentors');
    }
    
    static testMethod void validateEventVolunteerCampaignAssigned() {
        System.debug('BZ_CampaignAssigned_TEST.validateEventVolunteerCampaignAssigned - begin');
        List<Contact> contactsToInsert = new List<Contact>();
        Contact campaignOwner = new Contact(FirstName='Test', LastName='CampaignEVOwner2', OwnerId=userInfo.getUserId());
        contactsToInsert.add(campaignOwner);
        Contact contact = new Contact(FirstName='Test', LastName='EVUser1', User_Type__c='Event Volunteer', Signup_Date__c=Datetime.now(), BZ_User_Id__c=1234);
        contactsToInsert.add(contact);
        Contact contactConfirmed = new Contact(FirstName='Test', LastName='EVUser2', User_Type__c='Event Volunteer', Signup_Date__c=Datetime.now(), BZ_User_Id__c=12345);
        contactsToInsert.add(contactConfirmed);
        Contact contactOptedOut = new Contact(FirstName='Test', LastName='EVUser3', User_Type__c='Event Volunteer', Signup_Date__c=Datetime.now(), BZ_User_Id__c=12344);
        contactsToInsert.add(contactOptedOut);
        insert contactsToInsert;
        
        // Note: the Campaign.OwnerId refers to the User, so we need to use campaignOwner.OwnerId instead of Id.  See the child relationship of the User object.
        Campaign campaign = BZ_CampaignFactory_TEST.create(campaignOwner.OwnerId, 'Volunteer');
        campaign.Volunteer_Opportunities__c = 'Opp 1\nOpp 2';
        campaign.IsActive = true;
        insert campaign;
        
        List<CampaignMember> campaignMembersToInsert = new List<CampaignMember>();
        CampaignMember cm = new CampaignMember();
        cm.CampaignId=campaign.Id;
        cm.ContactId=contact.Id;
        campaignMembersToInsert.add(cm);

        CampaignMember cmConfirmed = new CampaignMember();
        cmConfirmed.CampaignId=campaign.Id;
        cmConfirmed.ContactId=contactConfirmed.Id;
        cmConfirmed.Candidate_Status__c = 'Confirmed';
        campaignMembersToInsert.add(cmConfirmed);
        
        CampaignMember cmOptedOut = new CampaignMember();
        cmOptedOut.CampaignId=campaign.Id;
        cmOptedOut.ContactId=contactOptedOut.Id;
        cmOptedOut.Candidate_Status__c = 'Opted Out';
        cmOptedOut.Opted_Out_Reason__c = 'No Time';
        campaignMembersToInsert.add(cmOptedOut);
        
        // This fires the trigger we're testing.
        insert campaignMembersToInsert;
        
        Contact updatedContact = [SELECT Id, Event_Volunteer_Information__c, Candidate_Status__c FROM Contact WHERE Id=:cm.ContactId];
        System.assert(updatedContact.Event_Volunteer_Information__c == 'Prospect', 'When a Contact is Assigned to a Event Volunteer campaign, their Event_Volunteer_Information__c should be set.');
                
        CampaignMember updatedCm = [SELECT Id, ContactId, CampaignId FROM CampaignMember WHERE Id=:cm.Id];
        List<Task> resultingTasks = [SELECT Id, WhoId, WhatId FROM Task
                                     WHERE WhoId=:updatedCm.ContactId AND
                                           WhatId=:updatedCm.CampaignId AND
                                           Subject LIKE '%Send Intro Email%'];
        System.assert(resultingTasks.size()==0, 'Expected NO Task to be created to Send Intro Email to Event Volunteers');
        
        Contact updatedContactConfirmed = [SELECT Id, Event_Volunteer_Information__c, Candidate_Status__c FROM Contact WHERE Id=:cmConfirmed.ContactId];
        System.assert(updatedContactConfirmed.Event_Volunteer_Information__c == 'Current', 'When a Confirmed Contact is Assigned to a Event Volunteer campaign, their Event_Volunteer_Information__c should be set to Current.');
                
        CampaignMember updatedCmConfirmed = [SELECT Id, ContactId, CampaignId FROM CampaignMember WHERE Id=:cmConfirmed.Id];
        resultingTasks = [SELECT Id, WhoId, WhatId FROM Task
                                     WHERE WhoId=:updatedCmConfirmed.ContactId AND
                                           WhatId=:updatedCmConfirmed.CampaignId AND
                                           Subject LIKE '%Send Intro Email%'];
        System.assert(resultingTasks.size()==0, 'Expected NO Task to be created to Send Intro Email to Event Volunteers');
        
        Contact updatedContactOptedOut = [SELECT Id, Event_Volunteer_Information__c, Candidate_Status__c FROM Contact WHERE Id=:cmOptedOut.ContactId];
        System.assert(updatedContactOptedOut.Event_Volunteer_Information__c == 'Opted Out', 'When a Opted Out Contact is Assigned to a Event Volunteer campaign, their Event_Volunteer_Information__c should be set to Opted Out.');
                
        CampaignMember updatedCmOptedOut = [SELECT Id, ContactId, CampaignId FROM CampaignMember WHERE Id=:cmOptedOut.Id];
        resultingTasks = [SELECT Id, WhoId, WhatId FROM Task
                                     WHERE WhoId=:updatedCmOptedOut.ContactId AND
                                           WhatId=:updatedCmOptedOut.CampaignId AND
                                           Subject LIKE '%Send Intro Email%'];
        System.assert(resultingTasks.size()==0, 'Expected NO Task to be created to Send Intro Email to Event Volunteers');
    }
    
    static testMethod void validateChampionCampaignAssigned() {
        System.debug('BZ_CampaignAssigned_TEST.validateChampionCampaignAssigned - begin');
        List<Contact> contactsToInsert = new List<Contact>();
        Contact campaignOwner = new Contact(FirstName='Test', LastName='CampaignChampOwner2', OwnerId=userInfo.getUserId());
        contactsToInsert.add(campaignOwner);
        Contact contact = new Contact(FirstName='Test', LastName='ChampUser1', User_Type__c='Champion', Signup_Date__c=Datetime.now(), BZ_User_Id__c=1234);
        contactsToInsert.add(contact);
        Contact contactConfirmed = new Contact(FirstName='Test', LastName='ChampUser2', User_Type__c='Champion', Signup_Date__c=Datetime.now(), BZ_User_Id__c=12345);
        contactsToInsert.add(contactConfirmed);
        Contact contactOptedOut = new Contact(FirstName='Test', LastName='ChampUser3', User_Type__c='Champion', Signup_Date__c=Datetime.now(), BZ_User_Id__c=12344);
        contactsToInsert.add(contactOptedOut);
        insert contactsToInsert;
        
        // Note: the Campaign.OwnerId refers to the User, so we need to use campaignOwner.OwnerId instead of Id.  See the child relationship of the User object.
        Campaign campaign = BZ_CampaignFactory_TEST.create(campaignOwner.OwnerId, 'Champion');
        campaign.IsActive = true;
        insert campaign;
        
        List<CampaignMember> campaignMembersToInsert = new List<CampaignMember>();
        CampaignMember cm = new CampaignMember();
        cm.CampaignId=campaign.Id;
        cm.ContactId=contact.Id;
        campaignMembersToInsert.add(cm);

        CampaignMember cmConfirmed = new CampaignMember();
        cmConfirmed.CampaignId=campaign.Id;
        cmConfirmed.ContactId=contactConfirmed.Id;
        cmConfirmed.Candidate_Status__c = 'Confirmed';
        campaignMembersToInsert.add(cmConfirmed);
        
        CampaignMember cmOptedOut = new CampaignMember();
        cmOptedOut.CampaignId=campaign.Id;
        cmOptedOut.ContactId=contactOptedOut.Id;
        cmOptedOut.Candidate_Status__c = 'Opted Out';
        cmOptedOut.Opted_Out_Reason__c = 'No Time';
        campaignMembersToInsert.add(cmOptedOut);
        
        // This fires the trigger we're testing.
        insert campaignMembersToInsert;
        
        Contact updatedContact = [SELECT Id, Champion_Information__c, Candidate_Status__c FROM Contact WHERE Id=:cm.ContactId];
        System.assert(updatedContact.Champion_Information__c == 'Prospect', 'When a Contact is Assigned to a Champion campaign, their Champion_Information__c should be set.');
                
        CampaignMember updatedCm = [SELECT Id, ContactId, CampaignId FROM CampaignMember WHERE Id=:cm.Id];
        List<Task> resultingTasks = [SELECT Id, WhoId, WhatId FROM Task
                                     WHERE WhoId=:updatedCm.ContactId AND
                                           WhatId=:updatedCm.CampaignId AND
                                           Subject LIKE '%Send Intro Email%'];
        System.assert(resultingTasks.size()==0, 'Expected NO Task to be created to Send Intro Email to Champions');
        
        Contact updatedContactConfirmed = [SELECT Id, Champion_Information__c, Candidate_Status__c FROM Contact WHERE Id=:cmConfirmed.ContactId];
        System.assert(updatedContactConfirmed.Champion_Information__c == 'Current', 'When a Confirmed Contact is Assigned to a Champion campaign, their Champion_Information__c should be set to Current.');
                
        CampaignMember updatedCmConfirmed = [SELECT Id, ContactId, CampaignId FROM CampaignMember WHERE Id=:cmConfirmed.Id];
        resultingTasks = [SELECT Id, WhoId, WhatId FROM Task
                                     WHERE WhoId=:updatedCmConfirmed.ContactId AND
                                           WhatId=:updatedCmConfirmed.CampaignId AND
                                           Subject LIKE '%Send Intro Email%'];
        System.assert(resultingTasks.size()==0, 'Expected NO Task to be created to Send Intro Email to Champions');
        
        Contact updatedContactOptedOut = [SELECT Id, Champion_Information__c, Candidate_Status__c FROM Contact WHERE Id=:cmOptedOut.ContactId];
        System.assert(updatedContactOptedOut.Champion_Information__c == 'Opted Out', 'When a Opted Out Contact is Assigned to a Champion campaign, their Champion_Information__c should be set to Opted Out.');
                
        CampaignMember updatedCmOptedOut = [SELECT Id, ContactId, CampaignId FROM CampaignMember WHERE Id=:cmOptedOut.Id];
        resultingTasks = [SELECT Id, WhoId, WhatId FROM Task
                                     WHERE WhoId=:updatedCmOptedOut.ContactId AND
                                           WhatId=:updatedCmOptedOut.CampaignId AND
                                           Subject LIKE '%Send Intro Email%'];
        System.assert(resultingTasks.size()==0, 'Expected NO Task to be created to Send Intro Email to Champions');
    }  
}
