public class BZ_SendTemplatedEmail {

    // Sends an email using an Email Template.
  // 
  // 
  //  templateId   must be ID of an Email template
  //  targetObjId must be a Contact, User, Lead Id -- also used in merge fields of template recipient.xxxx
  //  whatId    must be an SObject that is used in the merge fields of the template relatedTo.xxxx
  //  fromId    if non null, use current user, otherwise, use this ID (most likely an org wide no reply id)
  //  bcc      not permitted when using templates
  //  
  //  Adapted from: https://developer.salesforce.com/forums/ForumsMain?id=906F000000094ClIAI
  public static void sendTemplatedEmail(String[] toRecipients, String[] ccRecipients, String templateDeveloperName, ID targetObjId, Id whatId, ID orgWideEmailId, Boolean saveAsActivity, Attachment[] attachList ) {
        Messaging.SingleEmailMessage email = new Messaging.SingleEmailMessage();
    
        Id templateId;  
        try {
            templateId = [select id, name from EmailTemplate where DeveloperName = : templateDeveloperName].id;
        }
        catch (Exception e) {
          throw new BZ_EmailException ('BZ_SendTemplatedEmail.sendTemplatedEmail(): '+
                               'Unable to locate EmailTemplate using name: ' + templateDeveloperName + 
                           ' refer to Setup | Communications Templates | ' + templateDeveloperName);
        }
    
        email.setToAddresses(toRecipients);
        email.setCcAddresses(ccRecipients);
        email.setTargetObjectId(targetObjId);
        email.setWhatId(whatId);
        email.setorgWideEmailAddressId(orgWideEmailId);
        email.setTemplateId(templateId);
        email.setSaveAsActivity(saveAsActivity);      // save email as activity on the targetObjId (i.e. Contact). Note activity can't be saved on Users
    
        System.debug(LoggingLevel.INFO,'BZ_SendTemplatedEmail.sendTemplatedEmail(to:' + toRecipients + ' cc:' + ccRecipients +  ' templateId:' + templateId + ' targetObjId:' + targetObjId + 
                    ' whatId:' + whatId + ' orgWideEmailId: ' + orgWideEmailId+') -- begin');
        try {
            Messaging.sendEmail(new Messaging.SingleEmailMessage[] {email});
            return;
        }
        catch (EmailException e) {
            throw new BZ_EmailException('BZ_SendTemplatedEmail.sendTemplatedEmail(): error -- ' + e.getMessage());
        }
    }
}
