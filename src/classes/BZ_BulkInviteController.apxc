/**
 * Controller to handle adding and inviting users in bulk.
 * Queues up an INVITE email and a text message invite (if there is a phone number set).
 */
public class BZ_BulkInviteController extends BZ_CsvBulkInviteUploader {
    private ApexPages.StandardController m_controller {get; set;}
    private Campaign m_campaign {get;set;}
    List<Contact> m_contactsToBulkInvite;
    private String m_textMessageBody;
    private String m_resultMessage;
    private String m_contactsToInviteDisplay;
    private boolean m_contactsLoaded;
    private boolean m_textMessagesSent;

    public BZ_BulkInviteController(ApexPages.StandardController controller) {
        System.debug('BZ_BulkInviteController(): begin');
        if(!Test.isRunningTest()) {
            controller.addFields(new String[]{'Id', 'OwnerId', 'Type', 'Program_Site__c'}); // Avoid error: "SObject row was retrieved via SOQL without querying the requested field".  These fields are used when creating a Task history of the text messages sent.
        }
        this.m_controller = controller;
        this.m_contactsToBulkInvite = new List<Contact>();
        this.m_textMessageBody = '{!Contact.FirstName}, ready to apply to Braven? Go to: https://bebraven.org/apply-now or reply STOP to stop receiving text messages.';
        this.m_contactsLoaded = false;
        this.m_textMessagesSent = false;
        this.m_resultMessage = '';
        this.m_campaign = (Campaign)m_controller.getRecord();
    }

    // method called from the VF's action attribute to run the logic
    public PageReference sendTextMessages() {
        System.debug('BZ_BulkInviteController.sendTextMessages(): begin');
        try
        {
            // We need to reload the contacts from the database so that composite
            // fields like Name are populated and we have all the fields needed by
            // the BZ_BulkTexter.
            Set<Id> contactIdsToText = new Set<Id>();
            System.debug('BZ_BulkInviteController.sendTextMessages(): m_contactsToBulkInvite = '+m_contactsToBulkInvite);
            for (Contact c : m_contactsToBulkInvite){
                contactIdsToText.add(c.Id);
            }
            List<Contact> contactsToText = [SELECT Id, FirstName, LastName, Name, Phone FROM Contact WHERE Id in :contactIdsToText];
            System.debug('BZ_BulkInviteController.sendTextMessages(): about to send text messages to: '+contactsToText);
            BZ_BulkTexter texter = new BZ_BulkTexter(contactsToText, m_textMessageBody, m_campaign);
            texter.sendTextMessages();
            m_textMessagesSent = true;
            m_resultMessage = 'Text Messages Sent!';
        }
        catch (Exception e){
            ApexPages.addMessages(e);
            System.Debug('BZ_BulkInviteController.sendTextMessages(): Exception = ' + e);
            m_resultMessage = 'Failed sending the text messages.  Details: ' + e;
        }
        System.debug('BZ_BulkInviteController.sendTextMessages(): end');
        return null;
    }

    /**
     * Called when the file contents are done being read and ProcessRow has been
     * called for each row.
     */
    private void finishRead(){
        System.debug('BZ_BulkInviteController: finishRead() begin');
        m_resultMessage = ''; // Need to reset previous errors.
        
        // Ensure that there is an Account/Affiliation with the same name as the Program Site
        // so that it doesn't throw an exception when setting it.
        Id primaryAffiliationId;
        List<Account> accounts = [SELECT Id, Name FROM Account WHERE Name = :m_campaign.Program_Site__c];
        if (accounts == null || accounts.size() <=0){
            Account a = new Account(Name=m_campaign.Program_Site__c);
            insert a;
            primaryAffiliationId = a.Id;
            System.debug('BZ_BulkInviteController.finishRead(): created new Account '+ a + ' to set added Contacts Primary Affiliation to.');
        } else {
            primaryAffiliationId = accounts[0].Id;
        }

        List<Contact> contacts = getContacts();
        if (contacts.size() > 0)
        {
            Map<String, Contact> contactsToAdd = new Map<String, Contact>();
            for (Contact c : contacts)
            {
                contactsToAdd.put(c.Email.toLowerCase(), c);
            }
            
            // An existing contact in an active recruitment campaign will 
            // not be added.
            List<CampaignMember> campaignMembersToSkip = 
                [SELECT ContactId FROM CampaignMember 
                 WHERE CampaignId in 
                     (SELECT Id FROM Campaign 
                      WHERE IsActive = true AND 
                      (
                          Type = 'Leadership Coaches' OR 
                          Type = 'Program Participants' OR 
                          Type = 'Volunteer')
                     )
                ];
            Set<Id> contactIdsOfCampaignMembersToSkip = new Set<Id>();
            for (CampaignMember cm : campaignMembersToSkip){
                contactIdsOfCampaignMembersToSkip.add(cm.ContactId);
            }
            List<Contact> existingContactsInActiveRecruitmentCampaign = 
                [SELECT Id, Firstname, LastName, Email, Phone, npsp__Primary_Affiliation__c, Undergrad_University__c  
                FROM Contact 
                WHERE Email in :contactsToAdd.keySet() AND
                      Id in :contactIdsOfCampaignMembersToSkip];
            
            List<Contact> existingContactsNotInActiveRecruitmentCampaign = 
                [SELECT Id, FirstName, LastName, Email, Phone, npsp__Primary_Affiliation__c, Undergrad_University__c  
                FROM Contact 
                WHERE Email in :contactsToAdd.keySet() AND
                      Id NOT in :contactIdsOfCampaignMembersToSkip];

            if (existingContactsInActiveRecruitmentCampaign.size() > 0)
            {
                for (Contact c : existingContactsInActiveRecruitmentCampaign)
                {
                    System.debug('BZ_BulkInviteController.finishRead(): removing '+c+' from contactsToAdd.  Already IN active recruitment campaign.');
                    Contact updatedContact = contactsToAdd.get(c.Email.toLowerCase());
                    c.FirstName = updatedContact.FirstName;
                    c.LastName = updatedContact.LastName;
                    c.Phone = updatedContact.Phone;
                    contactsToAdd.remove(c.Email.toLowerCase());
                }
            }
            
            if (existingContactsNotInActiveRecruitmentCampaign.size() > 0)
            {
                for (Contact c : existingContactsNotInActiveRecruitmentCampaign)
                {
                    System.debug('BZ_BulkInviteController.finishRead(): removing '+c+' from contactsToAdd.  NOT in active recruitment campaign.');
                    Contact updatedContact = contactsToAdd.get(c.Email.toLowerCase());
                    c.FirstName = updatedContact.FirstName;
                    c.LastName = updatedContact.LastName;
                    c.Phone = updatedContact.Phone;
                    contactsToAdd.remove(c.Email.toLowerCase());
                }
            }

            Savepoint sp = Database.setSavepoint();
            try
            {
                System.debug('BZ_BulkInviteController.finishRead(): inserting the following new contacts: ' + contactsToAdd.values());
                insert contactsToAdd.values();
                
                // We may need to add their phone number or correct their name, 
                // so we stil update the contacts using the info in the sheet.
                System.debug('BZ_BulkInviteController.finishRead(): updating the following existing contacts in an Active recruitment campaign: ' + existingContactsInActiveRecruitmentCampaign);
                update existingContactsInActiveRecruitmentCampaign;
                System.debug('BZ_BulkInviteController.finishRead(): updating the following existing contacts NOT in an Active recruitment campaign: ' + existingContactsNotInActiveRecruitmentCampaign);
                update existingContactsNotInActiveRecruitmentCampaign;
                
                m_contactsToBulkInvite = new List<Contact>();
                m_contactsToBulkInvite.addAll(contactsToAdd.values());
                m_contactsToBulkInvite.addAll(existingContactsNotInActiveRecruitmentCampaign);
                System.debug('BZ_BulkInviteController.finishRead(): m_contactsToBulkInvite = '+m_contactsToBulkInvite);

                List<CampaignMember> cms = new List<CampaignMember>();
                m_contactsToInviteDisplay = '<table border="1"><tr><td style="padding:0 15px 0 15px;"><strong>Name</strong></td><td style="padding:0 15px 0 15px;"><strong>Email</strong></td><td style="padding:0 15px 0 15px;"><strong>Phone</strong></td></tr>';
                for (Contact c : m_contactsToBulkInvite)
                {
                    CampaignMember cm;
                    if (m_campaign.Type == 'Program Participants'){
                        cm = new CampaignMember(ContactId=c.Id, campaignId=m_campaign.Id, Undergrad_University__c=m_campaign.Program_Site__c);
                    } else {
                        cm = new CampaignMember(ContactId=c.Id, campaignId=m_campaign.Id);
                    }
                    cms.add(cm);
                    m_contactsToInviteDisplay += '<tr><td style="padding:0 15px 0 15px;">' + c.FirstName + ' ' + c.LastName + '</td><td style="padding:0 15px 0 15px;">' + c.Email + '</td><td style="padding:0 15px 0 15px;">' + c.Phone + '</td></tr>';    
                    System.debug('BZ_BulkInviteController.finishRead(): Added the following CampaignMember: '+cm);
                }
                m_contactsToInviteDisplay += '</table>';
                insert cms;

                Map<String, String[]> interactionInfoMap = getInteractionInfoMap();
                Map<Id, Contact> contactsToCreateInteractionInfoFor = new Map<Id, Contact>();
                for (Contact c : m_contactsToBulkInvite){
                    contactsToCreateInteractionInfoFor.put(c.Id, c);
                }
                List<Task> interactionTasksToAdd = BZ_TaskFactory.createTasks(cms, 'Interaction: How We Met {0}');
                for (Task t : interactionTasksToAdd){
                    Contact c = contactsToCreateInteractionInfoFor.get(t.WhoId);
                    String[] interactionInfo = interactionInfoMap.get(c.Email.toLowerCase());
                    if (interactionInfo != null){
                        t.Interaction_Type__c = interactionInfo[0];
                        t.Description = interactionInfo[1];
                        c.Initial_Connection__c = interactionInfo[1];
                    }
                    else {
                        System.debug('BZ_BulkInviteController.finishRead(): no interaction info found for "'+c.Email+'" -- SKIPPING task creation.');
                        t.Description = 'Added using Bulk Invite with no InteractionType information';
                        c.Initial_Connection__c = t.Description;
                    }
                    t.Status = 'Completed';
                    t.IsReminderSet = false;
                    if (m_campaign.Type == 'Program Participants'){
                        c.Undergrad_University__c = m_campaign.Program_Site__c;
                    }
                    c.npsp__Primary_Affiliation__c = primaryAffiliationId;
                }
                insert interactionTasksToAdd;
                update contactsToCreateInteractionInfoFor.values();

                m_contactsLoaded = true;
            } 
            catch (Exception e)
            {
                // roll everything back in case of error
                Database.rollback(sp);
                ApexPages.addMessages(e);
                System.Debug('BZ_BulkInviteController.finishRead(): Exception = ' + e);
                m_resultMessage = 'Failed adding the specified users.  Details: ' + e;
            }
        }
        else
        {
            System.debug('BZ_BulkInviteController.finishRead(): BZ_CsvContactsUploader.getContacts() returned 0');
            m_resultMessage = 'There are no Contacts to invite.  Double check the spreadsheet?';
        }
        System.debug('BZ_BulkInviteController: finishRead() end');
    }

    public String getTextMessageBody(){
        return m_textMessageBody;
    }

    public void setTextMessageBody(String value){
        System.debug('BZ_BulkInviteController.setTextMessageBody(value = '+value+')');
        m_textMessageBody = value; 
    }

    public String getResultMessage(){
        return m_resultMessage;
    }

    public boolean getContactsLoaded(){
        return m_contactsLoaded;
    }

    public boolean getTextMessagesSent(){
        return m_textMessagesSent;
    }

    public String getContactsToInviteDisplay(){
        return m_contactsToInviteDisplay;
    }
}
