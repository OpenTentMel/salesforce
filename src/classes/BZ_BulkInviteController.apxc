/**
 * Controller to handle adding and inviting users in bulk.
 * Queues up an INVITE email and a text message invite (if there is a phone number set).
 */
public class BZ_BulkInviteController extends BZ_CsvBulkInviteUploader {
    // This is true when the Bulk Invite add Campaign Member logic is running
    public static Boolean IsBulkInviteRunning {get; set;}
    static {
        IsBulkInviteRunning = false;
    }
    
    private ApexPages.StandardController m_controller {get; set;}
    private Campaign m_campaign {get;set;}
    List<Contact> m_contactsToBulkInvite;
    private String m_textMessageBody;
    private String m_resultMessage;
    private String m_contactsToInviteDisplay;
    private String m_contactsSkippedDisplay;
    private boolean m_contactsLoaded;
    private boolean m_textMessagesSent;
    private ID m_jobId;
    private BZ_BulkInviteControllerQueueable m_queueableController;

    public BZ_BulkInviteController(ApexPages.StandardController controller) {
        System.debug('BZ_BulkInviteController(): begin');
        if(!Test.isRunningTest()) {
            controller.addFields(new String[]{'Id', 'OwnerId', 'Type', 'Program_Site__c'}); // Avoid error: "SObject row was retrieved via SOQL without querying the requested field".  These fields are used when creating a Task history of the text messages sent.
        }
        this.m_controller = controller;
        this.m_campaign = (Campaign)m_controller.getRecord();
        this.m_contactsToBulkInvite = new List<Contact>();
        this.m_textMessageBody = '{!Contact.FirstName}, ready to apply to Braven? Go to: https://bebraven.org/apply-now or reply STOP to stop receiving text messages.';
        this.m_contactsLoaded = false;
        this.m_textMessagesSent = false;
        this.m_resultMessage = '';
        hasCompleted = false;
        hasStarted = false;
        progressString = '. . .';
    }

    // method called from the VF's action attribute to run the logic
    public PageReference sendTextMessages() {
        System.debug('BZ_BulkInviteController.sendTextMessages(): begin');
        try
        {
            // We need to reload the contacts from the database so that composite
            // fields like Name are populated and we have all the fields needed by
            // the BZ_BulkTexter.  Also, we can't load them by Id b/c the Id is populated
            // during async execution and doesn't seem to propogate back here.
            Set<String> contactEmailsToText = new Set<String>();
            System.debug('BZ_BulkInviteController.sendTextMessages(): m_contactsToBulkInvite = '+m_contactsToBulkInvite);
            for (Contact c : m_contactsToBulkInvite){
                contactEmailsToText.add(c.Email);
            }
            List<Contact> contactsToText = [SELECT Id, FirstName, LastName, Name, Phone FROM Contact WHERE Email in :contactEmailsToText];
            System.debug('BZ_BulkInviteController.sendTextMessages(): about to send text messages to: '+contactsToText);
            BZ_BulkTexter texter = new BZ_BulkTexter(contactsToText, m_textMessageBody, m_campaign);
            texter.sendTextMessages();
            m_textMessagesSent = true;
            m_resultMessage = 'Text Messages Sent!';
        }
        catch (Exception e){
            ApexPages.addMessages(e);
            System.Debug('BZ_BulkInviteController.sendTextMessages(): Exception = ' + e);
            m_resultMessage = 'Failed sending the text messages.  Details: ' + e;
        }
        System.debug('BZ_BulkInviteController.sendTextMessages(): end');
        return null;
    }

    /**
     * Called when the file contents are done being read and ProcessRow has been
     * called for each row.
     */
    private void finishRead(){
        System.debug('BZ_BulkInviteController: finishRead() begin');
        m_resultMessage = ''; // Need to reset previous errors.
        
        // Ensure that there is an Account/Affiliation with the same name as the Program Site
        // so that it doesn't throw an exception when setting it.
        Id primaryAffiliationId;
        List<Account> accounts = [SELECT Id, Name FROM Account WHERE Name = :m_campaign.Program_Site__c];
        if (accounts == null || accounts.size() <=0){
            Account a = new Account(Name=m_campaign.Program_Site__c);
            insert a;
            primaryAffiliationId = a.Id;
            System.debug('BZ_BulkInviteController.finishRead(): created new Account '+ a + ' to set added Contacts Primary Affiliation to.');
        } else {
            primaryAffiliationId = accounts[0].Id;
        }

        List<Contact> contacts = getContacts();
        if (contacts.size() > 0)
        {
            Map<String, Contact> contactsToAdd = new Map<String, Contact>();
            for (Contact c : contacts)
            {
                System.debug('BZ_BulkInviteController.finishRead(): contactsToAdd.put('+c.Email.toLowerCase()+', '+c+')'); 
                contactsToAdd.put(c.Email.toLowerCase(), c);
            }

            // TODO: handle phone numbers. E.g. if the email changed but the phone is the same, it 
            // should be a contact that we skip
            Map<String, Contact> existingContactEmailToContactMap = new Map<String, Contact>();
            Map<Id, Contact> existingContacts = new Map<Id, Contact>(
                [SELECT Id, Firstname, LastName, Email, Phone, Anticipated_Graduation__c, npsp__Primary_Affiliation__c, Undergrad_University__c  
                FROM Contact 
                WHERE Email in :contactsToAdd.keySet()]);

            Set<Id> duplicateContactsToRemove = new Set<Id>();
            if (existingContacts.size() > 0)
            {
                for (Contact c : existingContacts.values())
                {
                    if (!existingContactEmailToContactMap.containsKey(c.Email.toLowerCase())){
                        System.debug('BZ_BulkInviteController.finishRead(): removing '+c+' from contactsToAdd b/c they already are in SF.');
                        Contact updatedContact = contactsToAdd.get(c.Email.toLowerCase());
                        c.FirstName = updatedContact.FirstName;
                        c.LastName = updatedContact.LastName;
                        c.Phone = updatedContact.Phone;
                        c.Fields_Of_Study__c = updatedContact.Fields_Of_Study__c;
                        c.Anticipated_Graduation__c = updatedContact.Anticipated_Graduation__c;
                        contactsToAdd.remove(c.Email.toLowerCase());
                        existingContactEmailToContactMap.put(c.Email.toLowerCase(), c);
                        System.debug('BZ_BulkInviteController.finishRead(): adding existing contact to update = '+c);
                    }
                    else {
                        // This contact has duplicate records in Salesforce with the same email
                        // Just skip it since we already removed it from contactsToAdd and added it
                        // to existingContactEmails
                        System.debug('BZ_BulkInviteController.finishRead(): skipping contact = '+c+' because we already found another Salesforce Contact with that email address, existing contact = '+existingContactEmailToContactMap.get(c.Email.toLowerCase()));
                        duplicateContactsToRemove.add(c.Id);
                    }
                }
                
                for (Id cId : duplicateContactsToRemove){
                    existingContacts.remove(cId);
                }
                
                // When we table on campus to get contact info, we give them a flyer.  Some 
                // people signup on their own using the flyer before we Bulk Invite 
                // them causing a duplicate key exception.  So we exclude existing
                // campaign members.
                List<CampaignMember> existingCampaignMembers = 
                    [SELECT Id, FirstName, LastName, ContactId, Email, Phone FROM CampaignMember
                     WHERE CampaignId = :m_campaign.Id AND Email in :existingContactEmailToContactMap.keySet()];
                if (existingCampaignMembers.size() > 0){
                    m_contactsSkippedDisplay = '<table border="1"><tr><td style="padding:0 15px 0 15px;"><strong>Name</strong></td><td style="padding:0 15px 0 15px;"><strong>Email</strong></td><td style="padding:0 15px 0 15px;"><strong>Phone</strong></td></tr>';
                    for (CampaignMember cm : existingCampaignMembers){
                        existingContacts.remove(cm.ContactId);
                        m_contactsSkippedDisplay += '<tr><td style="padding:0 15px 0 15px;">' + cm.FirstName + ' ' + cm.LastName + '</td><td style="padding:0 15px 0 15px;">' + cm.Email + '</td><td style="padding:0 15px 0 15px;">' + cm.Phone + '</td></tr>';
                    }
                    m_contactsSkippedDisplay += '</table>';
                    System.debug('BZ_BulkInviteController.finishRead(): m_contactsSkippedDisplay = '+m_contactsSkippedDisplay);
                }
            }
            
            m_contactsToBulkInvite = new List<Contact>();
            m_contactsToBulkInvite.addAll(contactsToAdd.values());
            m_contactsToBulkInvite.addAll(existingContacts.values());
            System.debug('BZ_BulkInviteController.finishRead(): m_contactsToBulkInvite = '+m_contactsToBulkInvite);
            
            if (m_contactsToBulkInvite.size() > 0){
                m_contactsToInviteDisplay = '<table border="1"><tr><td style="padding:0 15px 0 15px;"><strong>Name</strong></td><td style="padding:0 15px 0 15px;"><strong>Email</strong></td><td style="padding:0 15px 0 15px;"><strong>Phone</strong></td></tr>';
                for (Contact c : m_contactsToBulkInvite)
                {
                    m_contactsToInviteDisplay += '<tr><td style="padding:0 15px 0 15px;">' + c.FirstName + ' ' + c.LastName + '</td><td style="padding:0 15px 0 15px;">' + c.Email + '</td><td style="padding:0 15px 0 15px;">' + c.Phone + '</td></tr>';
                }
                m_contactsToInviteDisplay += '</table>';
            }
            m_contactsLoaded = true;
            
            Map<String, String[]> infoMap = getInfoMap();
            
            m_queueableController = new BZ_BulkInviteControllerQueueable(
                m_campaign, primaryAffiliationId, contactsToAdd, existingContacts.values(),
                m_contactsToBulkInvite, infoMap);
            
            m_jobId = System.enqueueJob(m_queueableController);
            hasStarted = true;
        }
        else
        {
            System.debug('BZ_BulkInviteController.finishRead(): BZ_CsvContactsUploader.getContacts() returned 0');
            m_resultMessage = 'There are no Contacts to invite.  Double check the spreadsheet?';
        }
        System.debug('BZ_BulkInviteController: finishRead() end');
    }
    
     public PageReference checkComplete(){
        List<AsyncApexJob> jobs = [SELECT Status, NumberOfErrors, ExtendedStatus FROM AsyncApexJob WHERE Id=:m_jobId];
        AsyncApexJob job = null;
        if (jobs != null && jobs.size() == 1){
            job = jobs[0];
        }
        System.debug('BZ_BulkInviteController.checkComplete(): job status = '+job);         
        if (job != null && job.Status == 'Completed'){
            hasCompleted = true;
            progressString = 'Success!';
        } else if (job != null && job.Status == 'Failed'){
            progressString = 'Uh oh, something went wrong!  Here is the error: <br/><br/>' + job.ExtendedStatus;
            hasCompleted = true;
            ApexPages.Message errormsg = new ApexPages.Message(ApexPages.severity.ERROR,'The Bulk Invite operation failed.  Please contact your system administrator.');
            ApexPages.addMessage(errormsg);
            m_resultMessage = 'Failed adding the specified users.  Details: ' + job.ExtendedStatus;
        }
        else {
            progressString += ' .';
            hasCompleted = false;
        }
        return null;
    }

    public String getTextMessageBody(){
        return m_textMessageBody;
    }

    public void setTextMessageBody(String value){
        System.debug('BZ_BulkInviteController.setTextMessageBody(value = '+value+')');
        m_textMessageBody = value; 
    }

    public String getResultMessage(){
        return m_resultMessage;
    }

    public boolean getContactsLoaded(){
        return m_contactsLoaded;
    }

    public boolean getTextMessagesSent(){
        return m_textMessagesSent;
    }

    public String getContactsToInviteDisplay(){
        return m_contactsToInviteDisplay;
    }
    
    public Boolean getHaveContactsBeenInvited(){
        return !String.isEmpty(m_contactsToInviteDisplay);
    }
    
    public String getContactsSkippedDisplay(){
        return m_contactsSkippedDisplay;
    }
    
    public Boolean getHaveContactsBeenSkipped(){
        return !String.isEmpty(m_contactsSkippedDisplay);
    }
                                        
    /*
     * Starts off false and set to true when the operation is complete.
     */    
    public Boolean hasCompleted { get; set; }
    
    /*
     * Starts off false and set to true when the operation is queued up.
     */    
    public Boolean hasStarted { get; set; }
    
    /*
     * Displays progress as we poll the status of the job.
     */
    public String progressString { get; set; }
    
    public class BZ_BulkInviteException extends Exception {}
    
    private class BZ_BulkInviteControllerQueueable implements Queueable, Database.AllowsCallouts {
    
        private Campaign m_campaign;
        private Id m_primaryAffiliationId;
        Map<String, Contact> m_contactsToAdd;
        List<Contact> m_existingContactsToUpdate;
        List<Contact> m_contactsToBulkInvite;
        Map<String, String[]> m_infoMap;
        
        public BZ_BulkInviteControllerQueueable(Campaign campaign, Id primaryAffiliationId, 
                                                Map<String, Contact> contactsToAdd,
                                                List<Contact> existingContactsToUpdate,
                                                List<Contact> contactsToBulkInvite,
                                                Map<String, String[]> infoMap)
        {
            m_campaign = campaign;
            m_primaryAffiliationId = primaryAffiliationId;
            m_contactsToAdd = contactsToAdd;
            m_existingContactsToUpdate = existingContactsToUpdate;
            m_contactsToBulkInvite = contactsToBulkInvite;
            m_infoMap = infoMap;
        }
        
        public void execute(QueueableContext context)
        {
            System.Debug('BZ_BulkInviteControllerQueueable.execute(): begin');
            Savepoint sp = Database.setSavepoint();
            IsBulkInviteRunning = true;
            try 
            {
                System.debug('BZ_BulkInviteControllerQueueable.finishRead(): inserting the following new contacts: ' + m_contactsToAdd.values());
                insert m_contactsToAdd.values();
                
                // We may need to add their phone number or correct their name, 
                // so we stil update the contacts using the info in the sheet.
                System.debug('BZ_BulkInviteControllerQueueable.execute(): updating the following existing contacts: ' + m_existingContactsToUpdate);
                update m_existingContactsToUpdate;
                
                List<CampaignMember> cms = new List<CampaignMember>();
                DateTime bulkInviteDateTime = DateTime.now();
                for (Contact c : m_contactsToBulkInvite)
                {
                    String major;
                    String[] info = m_infoMap.get(c.Email.toLowerCase());
                    if (info != null){
                        if (!String.isBlank(info[2])){
                            major = info[2];
                        }
                    } else {
                        throw new BZ_BulkInviteException('No Interaction Info found for "'+c.Email+'".  Please make sure to set the Interaction Info for everyone -- Bulk Invite failed!');
                    }
                    
                    CampaignMember cm;
                    if (m_campaign.Type == 'Program Participants' || m_campaign.Type == 'Pre-Accelerator Participants' || m_campaign.Type == 'Mentee'){
                        cm = new CampaignMember(ContactId=c.Id, campaignId=m_campaign.Id, Major__c=major, Undergrad_University__c=m_campaign.Program_Site__c, Bulk_Invite_Date__c=bulkInviteDateTime);
                    } else {
                        cm = new CampaignMember(ContactId=c.Id, campaignId=m_campaign.Id, Major__c=major, Bulk_Invite_Date__c=bulkInviteDateTime);
                    }
                    cms.add(cm);
                    System.debug('BZ_BulkInviteControllerQueueable.execute(): Added the following CampaignMember: '+cm);
                }
                insert cms;

                Map<Id, Contact> contactsToCreateInteractionInfoFor = new Map<Id, Contact>();
                for (Contact c : m_contactsToBulkInvite){
                    contactsToCreateInteractionInfoFor.put(c.Id, c);
                }
                List<Task> interactionTasksToAdd = BZ_TaskFactory.createTasks(cms, 'Interaction: How We Met {0}');
                for (Task t : interactionTasksToAdd){
                    Contact c = contactsToCreateInteractionInfoFor.get(t.WhoId);
                    String[] info = m_infoMap.get(c.Email.toLowerCase());
                    if (info != null){
                        t.Interaction_Type__c = info[0];
                        t.Description = info[1];
                        c.Initial_Connection__c = info[1];
                        if (!String.isBlank(info[2])){
                          c.Fields_Of_Study__c = info[2];
                        }
                        if (!String.isBlank(info[3])){
                            c.Anticipated_Graduation__c = info[3];
                        }
                    }
                    else {
                        throw new BZ_BulkInviteException('No Interaction Info found for "'+c.Email+'".  Please make sure to set the Interaction Info for everyone -- Bulk Invite failed!');
                    }
                    t.Status = 'Completed';
                    t.IsReminderSet = false;
                    if (m_campaign.Type == 'Program Participants'){
                        c.Undergrad_University__c = m_campaign.Program_Site__c;
                    }
                    c.npsp__Primary_Affiliation__c = m_primaryAffiliationId;
                }
                insert interactionTasksToAdd;
                update contactsToCreateInteractionInfoFor.values();
            } catch (Exception e){
                // roll everything back in case of error
                Database.rollback(sp);
                System.Debug('BZ_BulkInviteControllerQueueable.execute(): Exception = ' + e);
                throw e;
            }
            finally {
                IsBulkInviteRunning = false;
            }
            System.Debug('BZ_BulkInviteControllerQueueable.execute(): end');
        }
    }
}
