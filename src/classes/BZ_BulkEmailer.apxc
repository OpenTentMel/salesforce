/**
 * Class used to send emails in bulk.
 */
public class BZ_BulkEmailer {

    /**
     * Return list of Tasks with the “Email Template To Send” field set, that are 
     * Related To the specified Campaign and Assigned To the specified User 
     * (e.g. current button pusher).   
     */
    public static List<Task> getQueuedEmails(Campaign campaign, User sender)
    {
        System.debug('BZ_BulkEmailer.getQueuedEmails('+campaign+','+sender+'): begin');
        List<Task> emailTasks = [SELECT Id, WhoId, WhatId, OwnerId, Status, EmailTemplate__c // WhoId = Name field
                                 FROM Task 
                                 WHERE WhatId = :campaign.Id    // Related To
                                  AND OwnerId = :sender.Id    // Assigned To
                                  AND Status != 'Completed'
                                  AND (               // Email Template To Send
                                        EmailTemplate__c != null OR EmailTemplate__c != ''
                                        )
                                ];

//        System.Debug('BZ_BulkEmailer.getQueuedEmails: emailsTasks.size() = '+emailTasks.size());
//        System.Debug('BZ_BulkEmailer.getQueuedEmails: emailTasks.get(0) = ' + emailTasks.get(0));

        return emailTasks;
    }

    /**
     * Send emails for each of the specified Tasks according to the “Email Template To Send” field.
     * Mark the Tasks as Complete when the emails are sent.
     * 
     * Returns the number of emails sent.
     */
    public static Integer sendMyQueuedEmails(List<Task> emailTasksToSend)
    {
        System.debug('BZ_BulkEmailer.sendMyQueuedEmails(emailTasksToSend): begin');

        Integer emailsSent = 0;
        // Segment the list into groups for each email template
        Map<String, List<Id>> emailTemplateToContactIds = new Map<String, List<Id>>();
        for(Task et : emailTasksToSend)
        {
            if (emailTemplateToContactIds.containsKey(et.EmailTemplate__c))
            {
              emailTemplateToContactIds.get(et.EmailTemplate__c).add(et.WhoId);
            }
      else
            {
                emailTemplateToContactIds.put(et.EmailTemplate__c, new List<Id>{et.WhoId});
            }            
            emailsSent++;
        }
        
        for (String template : emailTemplateToContactIds.keySet())
        { 
          //Map <Id, Contact> recipients = new Map<Id, Contact>([SELECT Id, Email FROM Contact WHERE Id IN :emailTemplateToContactIds.get(template)]);
          BZ_SendTemplatedEmail.sendMassTemplatedEmail(emailTemplateToContactIds.get(template), template);
        }
                     
        // We delete instead of updating to Completed because that causes two 
        // "Activity History" events, which is confusing.  We just want to leave 
        // the history of the actual email sent, not that fact that it needed to be sent.
        delete emailTasksToSend;
        return emailsSent;
    }
    
    /**
     * Goes through all Campaign Members for the specified campaign and
     * if their Application Status is set to “Waitlisted”, “Accepted”, or “Rejected” 
     * then returns a Map of the associated Email Template from the Campaign to the
     * List of Campaign Members that should be sent that email.
     */
    public static Map<String, List<CampaignMember>> getQueuedApplicationDecisions(Campaign campaign)
    {
        System.debug('BZ_BulkEmailer.getQueuedApplicationDecisions('+campaign+'): begin');
        Map<String, List<CampaignMember>> emailTemplateToRecipients = new Map<String, List<CampaignMember>>();
        
        List<CampaignMember> acceptedUsers = 
            [SELECT CampaignId, ContactId, Contact.Email, Contact.Name FROM CampaignMember 
             WHERE CampaignId = :campaign.Id AND
                   Application_Decision_Sent__c = FALSE AND
                   Candidate_Status__c = 'Accepted'
            ];
        //System.debug('BZ_BulkEmailer.getQueuedApplicationDecisions: acceptedUsers.size() = '+acceptedUsers.size());
        //System.Debug('BZ_BulkEmailer.getQueuedApplicationDecisions: acceptedUsers.get(0).Contact.Email = ' + acceptedUsers.get(0).Contact.Email);
        if (acceptedUsers != null && acceptedUsers.size() > 0)
        {
            emailTemplateToRecipients.put(campaign.App_Accepted_Email_Template__c, acceptedUsers);
        }
        
        List<CampaignMember> waitlistedUsers = 
            [SELECT CampaignId, ContactId, Contact.Email, Contact.Name FROM CampaignMember 
             WHERE CampaignId = :campaign.Id AND
                   Application_Decision_Sent__c = FALSE AND
                   Candidate_Status__c = 'Waitlisted'
            ];
        //System.debug('BZ_BulkEmailer.getQueuedApplicationDecisions: waitlistedUsers.size() = '+waitlistedUsers.size());
        //System.Debug('BZ_BulkEmailer.getQueuedApplicationDecisions: waitlistedUsers.get(0).Contact.Email = ' + waitlistedUsers.get(0).Contact.Email);
        if (waitlistedUsers != null && waitlistedUsers.size() > 0)
        {
            emailTemplateToRecipients.put(campaign.App_Waitlisted_Email_Template__c, waitlistedUsers);
        }

        List<CampaignMember> rejectedUsers = 
            [SELECT CampaignId, ContactId, Contact.Email, Contact.Name FROM CampaignMember 
             WHERE CampaignId = :campaign.Id AND
                   Application_Decision_Sent__c = FALSE AND
                   Candidate_Status__c = 'Rejected'
            ];
        //System.debug('BZ_BulkEmailer.getQueuedApplicationDecisions: rejectedUsers.size() = '+rejectedUsers.size());
        //System.Debug('BZ_BulkEmailer.getQueuedApplicationDecisions: rejectedUsers.get(0).Contact.Email = ' + rejectedUsers.get(0).Contact.Email);
        if (rejectedUsers != null && rejectedUsers.size() > 0)
        {
            emailTemplateToRecipients.put(campaign.App_Rejected_Email_Template__c, rejectedUsers);
        }

        return emailTemplateToRecipients;
    }
    
    /**
     * For each Email Template key in the specified Map, send the corresponding email 
     * to each CamaignMember in the List.
     * 
     * Returns the number of decisions sent.
     */
    public static Integer sendQueuedApplicationDecisions(Map<String, List<CampaignMember>> emailTemplateToRecipients)
    {
        System.debug('BZ_BulkEmailer.sendQueuedApplicationDecisions('+emailTemplateToRecipients+'): begin');
        Integer emailsSent = 0;
        
        for (String emailTemplate : emailTemplateToRecipients.keySet())
        {
            List<CampaignMember> cms = emailTemplateToRecipients.get(emailTemplate);
            for (CampaignMember cm : cms)
            {
                String[] recipients = new String[]{cm.Contact.Email};
                BZ_SendTemplatedEmail.sendTemplatedEmail(
                    recipients, null, emailTemplate, 
                    cm.ContactId, cm.CampaignId, null, TRUE, null); 
                emailsSent++;
                cm.Application_Decision_Sent__c = TRUE;
            }
            update cms;
        }
        return emailsSent;
    }
}
