/**
 * Class used to send emails in bulk.
 */
public class BZ_BulkEmailer {

    /**
     * Return list of Tasks with the “Email Template To Send” field set, that are 
     * Related To the specified Campaign and Assigned To the specified User 
     * (e.g. current button pusher).   
     */
    public static List<Task> getQueuedEmails(Campaign campaign, User sender)
    {
        System.debug('BZ_BulkEmailer.getQueuedEmails('+campaign+','+sender+'): begin');
        List<Task> emailTasks = [SELECT Id, WhoId, WhatId, OwnerId, Status, EmailTemplate__c // WhoId = Name field
                                 FROM Task 
                                 WHERE WhatId = :campaign.Id    // Related To
                                  AND OwnerId = :sender.Id    // Assigned To
                                  AND (               // Email Template To Send
                                        EmailTemplate__c != null OR EmailTemplate__c != ''
                                        )
                                ];

//        System.Debug('BZ_BulkEmailer.getQueuedEmails: emailsTasks.size() = '+emailTasks.size());
//        System.Debug('BZ_BulkEmailer.getQueuedEmails: emailTasks.get(0) = ' + emailTasks.get(0));

        return emailTasks;
    }

    /**
     * Send emails for each of the specified Tasks according to the “Email Template To Send” field.
     * Mark the Tasks as Complete when the emails are sent.
     * 
     * Returns the number of emails sent.
     */
    public static Integer sendMyQueuedEmails(List<Task> emailTasksToSend)
    {
        System.debug('BZ_BulkEmailer.sendMyQueuedEmails(emailTasksToSend): begin');

        Integer emailsSent = 0;
        for(Task et : emailTasksToSend)
        {
          // send the email template to each Name
            Contact recipient = [SELECT Id, Email FROM Contact WHERE Id = :et.WhoId];
            //System.Debug('BZ_BulkEmailer: recipient = ' + recipient);
            String[] recipients = new String[]{recipient.Email};
            BZ_SendTemplatedEmail.sendTemplatedEmail(
                recipients, null, et.EmailTemplate__c, recipient.Id, et.WhatId, null, TRUE, null); 
            emailsSent++;
        }
        // We delete instead of updating to Completed because that causes two 
        // "Activity History" events, which is confusing.  We just want to leave 
        // the history of the actual email sent, not that fact that it needed to be sent.
        delete emailTasksToSend;
        return emailsSent;
    }
    
    /**
     * Goes through all Campaign Members for the specified campaign and
     * if their Application Status is set to “Waitlisted”, “Accepted”, or “Rejected” 
     * then it pulls the corresponding email template from the campaign and sends
     * the associated template.
     * 
     * Returns the number of emails sent.
     */
    public static Integer SendQueuedApplicationDecisions(Campaign campaign)
    {
        System.debug('BZ_BulkEmailer.SendQueuedApplicationDecisions('+campaign+'): begin');
       
        List<CampaignMember> waitlistedUsers = 
            [SELECT CampaignId, ContactId, Contact.Email FROM CampaignMember 
             WHERE CampaignId = :campaign.Id AND
                   Application_Decision_Sent__c = FALSE AND
                   Candidate_Status__c = 'Waitlisted'
            ];
        System.debug('BZ_BulkEmailer.SendQueuedApplicationDecisions: waitlistedUsers.size() = '+waitlistedUsers.size());
        //System.Debug('BZ_BulkEmailer.SendQueuedApplicationDecisions: waitlistedUsers.get(0).Contact.Email = ' + waitlistedUsers.get(0).Contact.Email);
        
        List<CampaignMember> acceptedUsers = 
            [SELECT CampaignId, ContactId, Contact.Email FROM CampaignMember 
             WHERE CampaignId = :campaign.Id AND
                   Application_Decision_Sent__c = FALSE AND
                   Candidate_Status__c = 'Accepted'
            ];
        System.debug('BZ_BulkEmailer.SendQueuedApplicationDecisions: acceptedUsers.size() = '+acceptedUsers.size());
        //System.Debug('BZ_BulkEmailer.SendQueuedApplicationDecisions: acceptedUsers.get(0).Contact.Email = ' + acceptedUsers.get(0).Contact.Email);

        List<CampaignMember> rejectedUsers = 
            [SELECT CampaignId, ContactId, Contact.Email FROM CampaignMember 
             WHERE CampaignId = :campaign.Id AND
                   Application_Decision_Sent__c = FALSE AND
                   Candidate_Status__c = 'Rejected'
            ];
        System.debug('BZ_BulkEmailer.SendQueuedApplicationDecisions: rejectedUsers.size() = '+rejectedUsers.size());
        //System.Debug('BZ_BulkEmailer.SendQueuedApplicationDecisions: rejectedUsers.get(0).Contact.Email = ' + rejectedUsers.get(0).Contact.Email);

        Integer emailsSent = 0;
        for(CampaignMember cm : waitlistedUsers)
        {
            String[] recipients = new String[]{cm.Contact.Email};
            BZ_SendTemplatedEmail.sendTemplatedEmail(
                recipients, null, campaign.App_Waitlisted_Email_Template__c, 
                cm.ContactId, cm.CampaignId, null, TRUE, null); 
            emailsSent++;
            cm.Application_Decision_Sent__c = TRUE;
        }
        update waitlistedUsers;
        
        for(CampaignMember cm : acceptedUsers)
        {
            String[] recipients = new String[]{cm.Contact.Email};
            BZ_SendTemplatedEmail.sendTemplatedEmail(
                recipients, null, campaign.App_Accepted_Email_Template__c, 
                cm.ContactId, cm.CampaignId, null, TRUE, null); 
            emailsSent++;
            cm.Application_Decision_Sent__c = TRUE;
        }
        update acceptedUsers;
        
        for(CampaignMember cm : rejectedUsers)
        {
            String[] recipients = new String[]{cm.Contact.Email};
            BZ_SendTemplatedEmail.sendTemplatedEmail(
                recipients, null, campaign.App_Rejected_Email_Template__c, 
                cm.ContactId, cm.CampaignId, null, TRUE, null); 
            emailsSent++;
            cm.Application_Decision_Sent__c = TRUE;
        }
        update rejectedUsers;
        return emailsSent;
    }
}

