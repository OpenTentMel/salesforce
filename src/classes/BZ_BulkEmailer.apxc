/**
 * Class used to send emails in bulk.
 */
public class BZ_BulkEmailer {

    /**
     * Return list of Tasks with the “Email Template To Send” field set, that are 
     * Related To the specified Campaign and Assigned To the specified User 
     * (e.g. current button pusher).   
     */
    public static List<Task> getQueuedEmails(Campaign campaign, User sender)
    {
        System.debug('BZ_BulkEmailer.getQueuedEmails('+campaign+','+sender+'): begin');
        List<Task> emailTasks = [SELECT Id, WhoId, WhatId, OwnerId, Status, EmailTemplate__c, CampaignMemberId__c // WhoId = Name field
                                 FROM Task 
                                 WHERE WhatId = :campaign.Id    // Related To
                                  AND OwnerId = :sender.Id    // Assigned To
                                  AND Status != 'Completed'
                                  AND (               // Email Template To Send
                                        EmailTemplate__c != null OR EmailTemplate__c != ''
                                        )
                                  LIMIT 10 // Hack for now: The SingleMailMessage can only do 10 per button press.  You'll have to press the button a buunch of times.
                                ];

//        System.Debug('BZ_BulkEmailer.getQueuedEmails: emailsTasks.size() = '+emailTasks.size());
//        System.Debug('BZ_BulkEmailer.getQueuedEmails: emailTasks.get(0) = ' + emailTasks.get(0));

        return emailTasks;
    }

    /**
     * Send emails for each of the specified Tasks according to the “Email Template To Send” field.
     * Mark the Tasks as Complete when the emails are sent.
     * 
     * Returns the number of emails sent.
     */
    public static Integer sendMyQueuedEmails(List<Task> emailTasksToSend)
    {
        System.debug('BZ_BulkEmailer.sendMyQueuedEmails(emailTasksToSend): begin');
        
        Integer emailsSent = 0;
        for(Task et : emailTasksToSend)
        {
          // send the email template to each Name
            Contact recipient = [SELECT Id, Email FROM Contact WHERE Id = :et.WhoId];
            //System.Debug('BZ_BulkEmailer: recipient = ' + recipient);
            String[] recipients = new String[]{recipient.Email};
            BZ_SendTemplatedEmail.sendTemplatedEmail(
                recipients, null, et.EmailTemplate__c, recipient.Id, et.WhatId, null, TRUE, null); 
            emailsSent++;
        }
        
        /** COMMENTED OUT BC IT DOESN'T MERGE IN CAMPAIGN FIELDS EVEN IF I SET THE WhatId, 
            BC MassEmailMessage doesn't support it **/
        /*Integer emailsSent = 0;
        // Segment the list into groups for each email template
        Map<String, List<Id>> emailTemplateToContactIds = new Map<String, List<Id>>();
        for(Task et : emailTasksToSend)
        {
            if (emailTemplateToContactIds.containsKey(et.EmailTemplate__c))
            {
              emailTemplateToContactIds.get(et.EmailTemplate__c).add(et.WhoId);
            }
      else
            {
                emailTemplateToContactIds.put(et.EmailTemplate__c, new List<Id>{et.WhoId});
            }            
            emailsSent++;
        }
        
        for (String template : emailTemplateToContactIds.keySet())
        { 
          //Map <Id, Contact> recipients = new Map<Id, Contact>([SELECT Id, Email FROM Contact WHERE Id IN :emailTemplateToContactIds.get(template)]);
          BZ_SendTemplatedEmail.sendMassTemplatedEmail(emailTemplateToContactIds.get(template), template);
        }
        */
                     
        // We delete instead of updating to Completed because that causes two 
        // "Activity History" events, which is confusing.  We just want to leave 
        // the history of the actual email sent, not that fact that it needed to be sent.
        delete emailTasksToSend;
        return emailsSent;
    }
    
    /**
     * Goes through all Campaign Members for the specified campaign and
     * if their Application Status is set to “Waitlisted”, “Accepted”, or “Not Accepted” 
     * then returns a Map of the associated Email Template from the Campaign to the
     * List of Campaign Members that should be sent that email.
     */
    public static Map<String, List<CampaignMember>> getQueuedApplicationDecisions(Campaign campaign)
    {
        System.debug('BZ_BulkEmailer.getQueuedApplicationDecisions('+campaign+'): begin');
        Map<String, List<CampaignMember>> emailTemplateToRecipients = new Map<String, List<CampaignMember>>();
        Integer count = 0;
        
        List<CampaignMember> acceptedUsers;
        /*if (campaign.Request_Student_Id__c == true)
        {
            // Exclude students without Registration Code set since it's required for the email
            // template to give them a code to use to register with the campus registrar
             acceptedUsers = [SELECT CampaignId, ContactId, Student_Registration_Code__c, Contact.Email, Contact.Name FROM CampaignMember 
                 WHERE CampaignId = :campaign.Id AND
                   Application_Decision_Sent__c = FALSE AND
                   Candidate_Status__c = 'Accepted' AND
                   Student_Registration_Code__c != NULL 
            ];
        }
        else
        {*/
            acceptedUsers = [SELECT CampaignId, ContactId, Contact.Email, Contact.Name FROM CampaignMember 
                WHERE CampaignId = :campaign.Id AND
                   Application_Decision_Sent__c = FALSE AND
                   Candidate_Status__c = 'Accepted'
            ];
        /*}*/
        
        //System.debug('BZ_BulkEmailer.getQueuedApplicationDecisions: acceptedUsers.size() = '+acceptedUsers.size());
        //System.Debug('BZ_BulkEmailer.getQueuedApplicationDecisions: acceptedUsers.get(0).Contact.Email = ' + acceptedUsers.get(0).Contact.Email);
        if (acceptedUsers != null && acceptedUsers.size() > 0)
        {
            count += acceptedUsers.size();
            emailTemplateToRecipients.put(campaign.App_Accepted_Email_Template__c, acceptedUsers);
        }
        
        List<CampaignMember> waitlistedUsers = 
            [SELECT CampaignId, ContactId, Contact.Email, Contact.Name FROM CampaignMember 
             WHERE CampaignId = :campaign.Id AND
                   Application_Decision_Sent__c = FALSE AND
                   Candidate_Status__c = 'Waitlisted'
            ];
        //System.debug('BZ_BulkEmailer.getQueuedApplicationDecisions: waitlistedUsers.size() = '+waitlistedUsers.size());
        //System.Debug('BZ_BulkEmailer.getQueuedApplicationDecisions: waitlistedUsers.get(0).Contact.Email = ' + waitlistedUsers.get(0).Contact.Email);
        if (waitlistedUsers != null && waitlistedUsers.size() > 0)
        {
            count += waitlistedUsers.size();
            emailTemplateToRecipients.put(campaign.App_Waitlisted_Email_Template__c, waitlistedUsers);
        }

        List<CampaignMember> notAcceptedUsers = 
            [SELECT CampaignId, ContactId, Contact.Email, Contact.Name FROM CampaignMember 
             WHERE CampaignId = :campaign.Id AND
                   Application_Decision_Sent__c = FALSE AND
                   Candidate_Status__c = 'Not Accepted'
            ];
        //System.debug('BZ_BulkEmailer.getQueuedApplicationDecisions: notAcceptedUsers.size() = '+notAcceptedUsers.size());
        //System.Debug('BZ_BulkEmailer.getQueuedApplicationDecisions: notAcceptedUsers.get(0).Contact.Email = ' + notAcceptedUsers.get(0).Contact.Email);
        if (notAcceptedUsers != null && notAcceptedUsers.size() > 0)
        {
            count += notAcceptedUsers.size();
            emailTemplateToRecipients.put(campaign.App_Not_Accepted_Email_Template__c, notAcceptedUsers);
        }

        if (count > 10)
        {
            // Hack for now b/c SingleMailMessage can only do 10 per button press.
            // You'll have to press the button a buunch of times.
            Map<String, List<CampaignMember>> upTo10emailTemplateToRecipients = new Map<String, List<CampaignMember>>();
            Integer recipientsAdded = 0;
            for (String emailTemplate : emailTemplateToRecipients.keySet())
            {
                upTo10emailTemplateToRecipients.put(emailTemplate, new List<CampaignMember>());
                List<CampaignMember> cms = emailTemplateToRecipients.get(emailTemplate);
                for (CampaignMember cm : cms)
                {
                    if (recipientsAdded < 10)
                    {
                        upTo10emailTemplateToRecipients.get(emailTemplate).add(cm);
                        recipientsAdded++;
                    }
                    else
                    {
                        return upTo10emailTemplateToRecipients;
                    }
                }
            }
            return upTo10emailTemplateToRecipients;
        }
        else
        {
            return emailTemplateToRecipients;
        }
    }
    
    /**
     * For each Email Template key in the specified Map, send the corresponding email 
     * to each CamaignMember in the List.
     * 
     * Returns the number of decisions sent.
     */
    public static Integer sendQueuedApplicationDecisions(Map<String, List<CampaignMember>> emailTemplateToRecipients)
    {
        System.debug('BZ_BulkEmailer.sendQueuedApplicationDecisions('+emailTemplateToRecipients+'): begin');
        Integer emailsSent = 0;
        
        for (String emailTemplate : emailTemplateToRecipients.keySet())
        {
            List<CampaignMember> cms = emailTemplateToRecipients.get(emailTemplate);
            for (CampaignMember cm : cms)
            {
                String[] recipients = new String[]{cm.Contact.Email};
                BZ_SendTemplatedEmail.sendTemplatedEmail(
                    recipients, null, emailTemplate, 
                    cm.ContactId, cm.CampaignId, null, TRUE, null); 
                emailsSent++;
                cm.Application_Decision_Sent__c = TRUE;
            }
            update cms;
        }
        return emailsSent;
    }
}
