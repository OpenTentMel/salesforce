@isTest 
private class BZ_CandidateStatusChanged_TEST {
    static testMethod void validateInterviewRequested() {
        Contact campaignOwner = new Contact(FirstName='Test', LastName='CampaignOwner_asc1', OwnerId=userInfo.getUserId());
        insert campaignOwner;
        Contact contact = new Contact(FirstName='Test', LastName='AppStatChanged1');
        insert contact;
        
        // Note: the Campaign.OwnerId refers to the User, so we need to use campaignOwner.OwnerId instead of Id.  See the child relationship of the User object.
        String emailTemplateName = 'Test Interview Requested Email';
        String emailTemplateDeveloperName = 'Test_Interview_Requested_Email';
        Campaign campaign = BZ_CampaignFactory_TEST.create(campaignOwner.OwnerId, 'Leadership Coaches');
        campaign.App_Interview_Requested_Email_Template__c = emailTemplateName;
        insert campaign;
        
        CampaignMember cm = new CampaignMember();
        cm.CampaignId=campaign.Id;
        cm.ContactId=contact.Id;
       
        insert cm;
        
        // This fires the trigger we're testing.
        cm.Candidate_Status__c = 'Interview Requested';
        update cm;
    
        List<Task> resultingTasks = [SELECT Id, WhoId, WhatId FROM Task
                                    WHERE WhoId=:cm.ContactId AND 
                                          WhatId=:cm.CampaignId AND
                                          Subject LIKE '%Send Interview Request Email%'];
        System.assert(resultingTasks.size()==1, 'Expected Task to be created to Send Interview Request Email');
    }
    
    /*static testMethod void validateStudentRegistrationCodeTask() {
        Contact campaignOwner = new Contact(FirstName='Test', LastName='CampaignOwner_srct1', OwnerId=userInfo.getUserId());
        insert campaignOwner;
        Contact contact = new Contact(FirstName='Test', LastName='AppStatChanged2');
        insert contact;
        
        // Note: the Campaign.OwnerId refers to the User, so we need to use campaignOwner.OwnerId instead of Id.  See the child relationship of the User object.
        Campaign campaign = BZ_CampaignFactory_TEST.create(campaignOwner.OwnerId, 'Program Participants');
        campaign.Request_Student_Id__c = true;
        insert campaign;
        
        CampaignMember cm = new CampaignMember();
        cm.CampaignId=campaign.Id;
        cm.ContactId=contact.Id;
       
        insert cm;
        
        // This fires the trigger we're testing.
        cm.Candidate_Status__c = 'Accepted';
        update cm;
    
        List<Task> resultingTasks = [SELECT Id, WhoId, WhatId FROM Task
                                    WHERE WhoId=:cm.ContactId AND 
                                          WhatId=:cm.CampaignId AND
                                          Subject LIKE '%Set Student Registration Code%'];
        System.assert(resultingTasks.size()==1, 'Expected Task to be created to Set Student Registration Code');
    }*/
    
    static testMethod void validateConfirmed() {
        Contact campaignOwner = new Contact(FirstName='Test', LastName='CampaignOwner_confirmed1', OwnerId=userInfo.getUserId());
        insert campaignOwner;
        Contact contact = new Contact(FirstName='Test', LastName='AppStatChangedToConfirmed1');
        insert contact;
        
        // Note: the Campaign.OwnerId refers to the User, so we need to use campaignOwner.OwnerId instead of Id.  See the child relationship of the User object.
        Campaign campaign = BZ_CampaignFactory_TEST.create(campaignOwner.OwnerId, 'Leadership Coaches');
        insert campaign;
        
        CampaignMember cm = new CampaignMember();
        cm.CampaignId=campaign.Id;
        cm.ContactId=contact.Id;
       
        insert cm;
        
        // This fires the trigger we're testing.
        cm.Candidate_Status__c = 'Confirmed';
        update cm;
    
        Contact updatedContact = [SELECT Id, Volunteer_Information__c, Candidate_Status__c FROM Contact WHERE Id=:cm.ContactId];
        System.assert(updatedContact.Volunteer_Information__c == 'Current LC', 'When a Contact is Confirmed, their Volunteer Information should be set.');
        System.assert(updatedContact.Candidate_Status__c == 'Confirmed', 'When a Contact is Confirmed, their Candidate Status should be set.');
    }
    
    static testMethod void validateAccepted() {
        Contact campaignOwner = new Contact(FirstName='Test', LastName='CampaignOwner_aqmct1', OwnerId=userInfo.getUserId());
        insert campaignOwner;
        Contact contact = new Contact(FirstName='Test', LastName='AppStatChangedToAccepted1');
        insert contact;
        
        // Note: the Campaign.OwnerId refers to the User, so we need to use campaignOwner.OwnerId instead of Id.  See the child relationship of the User object.
        Campaign campaign = BZ_CampaignFactory_TEST.create(campaignOwner.OwnerId, 'Leadership Coaches');
        insert campaign;
        
        CampaignMember cm = new CampaignMember();
        cm.CampaignId=campaign.Id;
        cm.ContactId=contact.Id;
       
        insert cm;
        
        // This fires the trigger we're testing.
        cm.Candidate_Status__c = 'Accepted';
        update cm;
    
        // BTODO: commented out for now until we design and implement the confirmation and cohort mapping flow
       /* List<Task> resultingTasks = [SELECT Id, WhoId, WhatId FROM Task
                                    WHERE WhoId=:cm.ContactId AND 
                                          WhatId=:cm.CampaignId AND
                                          Subject LIKE '%Map cohort%'];
        System.assert(resultingTasks.size()==1, 'Expected Task to be created to Map the cohort'); */
        
        Contact updatedContact = [SELECT Id, Volunteer_Information__c, Candidate_Status__c FROM Contact WHERE Id=:cm.ContactId];
        System.assert(updatedContact.Volunteer_Information__c == 'LC Pipeline', 'When a Contact is Accepted, their Volunteer Information should not be changed.');
        System.assert(updatedContact.Candidate_Status__c == 'Accepted', 'When a Contact is Accepted, their Candidate Status should be set.');
    }
    
    static testMethod void validateOptedOut() {
        Contact campaignOwner = new Contact(FirstName='Test', LastName='CampaignOwner_ooct1', OwnerId=userInfo.getUserId());
        insert campaignOwner;
        Contact contact = new Contact(FirstName='Test', LastName='AppStatChangedToOptedOut1', Volunteer_Information__c='Current LC');
        insert contact;
        
        // Note: the Campaign.OwnerId refers to the User, so we need to use campaignOwner.OwnerId instead of Id.  See the child relationship of the User object.
        Campaign campaign = BZ_CampaignFactory_TEST.create(campaignOwner.OwnerId, 'Leadership Coaches');
        insert campaign;
        
        CampaignMember cm = new CampaignMember();
        cm.CampaignId=campaign.Id;
        cm.ContactId=contact.Id;
       
        insert cm;
        
        // This fires the trigger we're testing.
        cm.Candidate_Status__c = 'Opted Out';
        cm.Opted_Out_Reason__c = 'Dropped - During Program';
        update cm;
    
        Contact updatedContact = [SELECT Id, Volunteer_Information__c, Candidate_Status__c FROM Contact WHERE Id=:cm.ContactId];
        System.assert(updatedContact.Volunteer_Information__c == 'LC Pipeline', 'When a Contact is Opted Out, their Volunteer Information should be set back to be in the pipeline.');
        System.assert(updatedContact.Candidate_Status__c == 'Opted Out', 'When a Contact is Opted Out, their Candidate Status should be set.');
    }
    
    static testMethod void validateReviewAppTaskClosed() {
        Contact campaignOwner = new Contact(FirstName='Test', LastName='CampaignOwner_vratc1', OwnerId=userInfo.getUserId());
        insert campaignOwner;
        Contact contact_accepted = new Contact(FirstName='Test', LastName='AppStatClosedAccepted1');
        insert contact_accepted;
        Contact contact_waitlisted = new Contact(FirstName='Test', LastName='AppStatClosedWaitlisted1');
        insert contact_waitlisted;
        Contact contact_not_accepted = new Contact(FirstName='Test', LastName='AppStatClosedNotAccepted1');
        insert contact_not_accepted;
        
        // Note: the Campaign.OwnerId refers to the User, so we need to use campaignOwner.OwnerId instead of Id.  See the child relationship of the User object.
        Campaign campaign = BZ_CampaignFactory_TEST.create(campaignOwner.OwnerId, 'Leadership Coaches');
        insert campaign;
        
        CampaignMember cm_accepted = new CampaignMember();
        cm_accepted.CampaignId=campaign.Id;
        cm_accepted.ContactId=contact_accepted.Id;
        insert cm_accepted;
        List<Task> t_accepted = BZ_TaskFactory.createTasks(new CampaignMember[]{cm_accepted}, 'Review submitted application for {0}');
        insert t_accepted;
        
        CampaignMember cm_waitlisted = new CampaignMember();
        cm_waitlisted.CampaignId=campaign.Id;
        cm_waitlisted.ContactId=contact_waitlisted.Id;
        insert cm_waitlisted;
        List<Task> t_waitlisted = BZ_TaskFactory.createTasks(new CampaignMember[]{cm_waitlisted}, 'Review submitted application for {0}');
        insert t_waitlisted;

        CampaignMember cm_not_accepted = new CampaignMember();
        cm_not_accepted.CampaignId=campaign.Id;
        cm_not_accepted.ContactId=contact_not_accepted.Id;
        insert cm_not_accepted;
        List<Task> t_not_accepted = BZ_TaskFactory.createTasks(new CampaignMember[]{cm_not_accepted}, 'Review submitted application for {0}');
        insert t_not_accepted;
        
        Test.startTest();

        cm_accepted.Candidate_Status__c = 'Accepted';
        update cm_accepted;
    
        List<Task> resultingTasks_accepted = [SELECT Id, Status FROM Task 
                                     WHERE WhoId=:cm_accepted.ContactId AND 
                                           WhatId=:cm_accepted.CampaignId AND
                                           Status='Completed' AND
                                           Subject LIKE '%Review submitted application for%'];
        System.assert(resultingTasks_accepted.size()==1, 'Expected Task to Review the application to be closed when Accepted.');
        
        cm_waitlisted.Candidate_Status__c = 'Waitlisted';
        update cm_waitlisted;
        
        List<Task> resultingTasks_waitlisted = [SELECT Id, Status FROM Task 
                                     WHERE WhoId=:cm_waitlisted.ContactId AND 
                                           WhatId=:cm_waitlisted.CampaignId AND
                                           Status='Completed' AND
                                           Subject LIKE '%Review submitted application for%'];
        System.assert(resultingTasks_waitlisted.size()==1, 'Expected Task to Review the application to be closed when Waitlisted.');

        cm_not_accepted.Candidate_Status__c = 'Not Accepted';
        update cm_not_accepted;
        
        List<Task> resultingTasks_not_accepted = [SELECT Id, Status FROM Task 
                                     WHERE WhoId=:cm_not_accepted.ContactId AND 
                                           WhatId=:cm_not_accepted.CampaignId AND
                                           Status='Completed' AND
                                           Subject LIKE '%Review submitted application for%'];
        System.assert(resultingTasks_not_accepted.size()==1, 'Expected Task to Review the application to be closed when Not Accepted.');
        
        Test.stopTest();
    }
    
    static testMethod void validateReviewAppTaskClosedInterviewRequested() {
        Contact campaignOwner = new Contact(FirstName='Test', LastName='CampaignOwner_vratc2', OwnerId=userInfo.getUserId());
        insert campaignOwner;
        Contact contact_interview = new Contact(FirstName='Test', LastName='AppStatClosedInterview');
        insert contact_interview;
        
        // Note: the Campaign.OwnerId refers to the User, so we need to use campaignOwner.OwnerId instead of Id.  See the child relationship of the User object.
        Campaign campaign = BZ_CampaignFactory_TEST.create(campaignOwner.OwnerId, 'Program Participants');
        campaign.App_Interview_Requested_Email_Template__c = 'BZ_SomeInterviewRequestTemplate';
        insert campaign;
        
        CampaignMember cm_interview = new CampaignMember();
        cm_interview.CampaignId=campaign.Id;
        cm_interview.ContactId=contact_interview.Id;
        insert cm_interview;
        List<Task> t_interview = BZ_TaskFactory.createTasks(new CampaignMember[]{cm_interview}, 'Review submitted application for {0}');
        insert t_interview;
        
        Test.startTest();

        cm_interview.Candidate_Status__c = 'Interview Requested';
        update cm_interview;
        
        List<Task> resultingTasks_interview = [SELECT Id, Status FROM Task 
                                     WHERE WhoId=:cm_interview.ContactId AND 
                                           WhatId=:cm_interview.CampaignId AND
                                           Status='Completed' AND
                                           Subject LIKE '%Review submitted application for%'];
        System.assert(resultingTasks_interview.size()==1, 'Expected Task to Review the application to be closed when Interview Requested.');

        Test.stopTest();
    }
}
