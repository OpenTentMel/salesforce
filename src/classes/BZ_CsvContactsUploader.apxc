/**
 * Reads a CSV file of Contacts in the format: 
 * FirstName, LastName, Email, Phone, InteractionType, InteractionDescription, BZRegion
 * Only FirstName, LastName, Email are required.
 */
public abstract class BZ_CsvContactsUploader extends BZ_CsvUploaderBase {

    private List<Contact> m_contactsToBulkInvite;
    private Set<String> m_bzregions;

    abstract void finishRead();

    public BZ_CsvContactsUploader(){
        m_contactsToBulkInvite = new List<Contact>();
        m_bzregions = new Set<String>();
        Schema.DescribeFieldResult fieldResult = Contact.BZ_Region__c.getDescribe();
        List<Schema.PicklistEntry> ple = fieldResult.getPicklistValues();
        for( Schema.PicklistEntry f : ple)
        {
            m_bzregions.add(f.getValue());
        }
    }

    /**
     * Called for each row in the uploaded CSV so subclasses can process them.
     */
    protected virtual boolean ProcessRow(String[] rowValues){
        try
        {
            if (rowValues.size() >= 3) // The last row may have 3 columns instead of 4 if there is no phone
            {
                System.debug('BZ_CsvContactsUploader.ProcessRow(rowValues=['+rowValues+'])');
                Contact c = new Contact();
                if (!String.isEmpty(rowValues[0].trim())){
                    c.FirstName = rowValues[0].trim();
                } else {
                    System.debug('BZ_CsvContactsUploader.ProcessRow(rowValues=['+rowValues+']) -- SKIPPING because First Name is not set.');
                    return false;
                }

                if (!String.isEmpty(rowValues[1].trim())){
                    c.LastName = rowValues[1].trim();
                } else {
                    System.debug('BZ_CsvContactsUploader.ProcessRow(rowValues=['+rowValues+']) -- SKIPPING because Last Name is not set.');
                    return false;
                }

                if (!String.isEmpty(rowValues[2].trim())){
                    c.Email = rowValues[2].trim();
                } else {
                    System.debug('BZ_CsvContactsUploader.ProcessRow(rowValues=['+rowValues+']) -- SKIPPING because Email is not set.');
                    return false;
                }

                if(rowValues.size() >= 4 && !String.isEmpty(rowValues[3]))
                {
                    c.Phone = rowValues[3].trim();
                }
                
                if (rowValues.size() >= 7)
                {
                    String bz_region = rowValues[6].trim();
                    if (m_bzregions.contains(bz_region)){
                        c.BZ_Region__c = bz_region;
                    }
                    else{
                        System.debug('BZ_CsvContactsUploader.ProcessRow(rowValues=['+rowValues+']) -- SKIPPING because the 7th column does not contain a BZ Region');
                        return false;
                    }
                }

                System.debug('BZ_CsvContactsUploader.ProcessRow: adding c = '+c+' to m_contactsToBulkInvite');
                m_contactsToBulkInvite.add(c);
                return true;
            }
            else
            {
                System.debug('BZ_CsvContactsUploader.ProcessRow(rowValues=['+rowValues+']) -- SKIPPING because there are not 4 columns');
                return false;
            }
        } catch (Exception e){
            ApexPages.Message errormsg = new ApexPages.Message(ApexPages.severity.ERROR,'An error has occured reading the CSV file.  Format expected is FirstName, LastName, Email, Phone where phone is the only optional value: '+e.getMessage());
            ApexPages.addMessage(errormsg);
            return false;
        }
    }

    public List<Contact> getContacts(){
        return m_contactsToBulkInvite;
    }
}
