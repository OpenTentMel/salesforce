/**
 * Base class to handle uploading CSV files and processing it's contents.
 * On a Visualforce page, bind to this class using something like:
 * <apex:inputFile value="{!contentFile}" filename="{!nameFile}" />
 * <apex:commandButton action="{!ReadFile}" value="Upload File" />
 */
public abstract class BZ_CsvUploaderBase {
    public string nameFile{get;set;}
    public Blob contentFile{get;set;}
    String[] filelines = new String[]{};
    protected String[] m_headerValues;

    /**
     * Called for each row in the uploaded CSV so subclasses can process them.
     */
    abstract boolean ProcessRow(String[] rowValues);

    /**
     * Called when the file contents are done being read and ProcessRow has been
     * called for each row.
     */
    abstract void finishRead();


    /* This function reads the CSV file and calls ProcessRow for each row in the file. */
    public Pagereference ReadFile()
    {
        //Convert the uploaded file which is in BLOB format into a string
        nameFile = blobToString( contentFile,'ISO-8859-1');
        return ProcessFile(nameFile);
    }

    /* This function processes the contents of a CSV file passed as a string and
     * calls ProcessRow for each row in the file. 
     */
    public Pagereference ProcessFile(String fileContents)
    {
        try
        {
            //Now sepatate every row of the excel file
            SSSCsvReader parser = new SSSCsvReader(fileContents);
            String[] lineParts = parser.readLine();
            m_headerValues = lineParts;
            // TODO remove this debug log
                        System.debug('setting headervalues to '+m_headerValues);
            lineParts = parser.readLine(); // Skip header row.
            while (lineParts != null){
                ProcessRow(lineParts);
                lineParts = parser.readLine();
            }
        }
        catch(Exception e){
            ApexPages.Message errormsg = new ApexPages.Message(ApexPages.severity.ERROR,'An error has occured reading the CSV file'+e.getMessage());
            ApexPages.addMessage(errormsg);
        }

        finishRead();

        return null;
    }

    /**
     * This function convers the input CSV file in BLOB format into a string
     *   @param input    Blob data representing correct string in @inCharset encoding
     *   @param inCharset    encoding of the Blob data (for example 'ISO 8859-1')
     */
    public static String blobToString(Blob input, String inCharset){
        String hex = EncodingUtil.convertToHex(input);
        System.assertEquals(0, hex.length() & 1);
        final Integer bytesCount = hex.length() >> 1;
        String[] bytes = new String[bytesCount];
        for(Integer i = 0; i < bytesCount; ++i)
            bytes[i] =  hex.mid(i << 1, 2);
        return EncodingUtil.urlDecode('%' + String.join(bytes, '%'), inCharset);
    }
    
    static private Pattern quotePattern = Pattern.compile('(?<!")"(?!")');
    
    private class SSSCsvReader {
        private String delim = ',';
        // the input data
        private String[] buffer;
        
        public SSSCsvReader(String data){
            this.buffer = data.split('\n'); 
        }
        
        // Commented b/c not currently used and don't want to unit test.
        /*public SSSCsvReader(String data, String delim){
            this.buffer = data.split('\n'); 
            this.delim = delim;
        }*/        
        
        /** 
         * Read and parse next available line.  Return null if end of stream.
         * This function is meant to handle parsing a CSV row, dealing with 
         * escaped columns. E.g. "Newark, NJ" should be it's own cell value.
         * Adapted from here: https://gist.github.com/nicocrm/858086
         */
        private String[] readLine(){
            if(buffer.size() == 0)
                return null;
            String line = this.buffer.remove(0);
            String[] parts = new String[] {};
            while(line != ''){
                Integer next = 0;
                if(line.startsWith('"')){
                    line = line.substring(1); // strip initial
                    Integer quoteIndex = findQuote(line, 0);
                    while(quoteIndex == -1){
                        if(buffer.size() == 0){
                            // EOT!
                            quoteIndex = line.length();
                        } else { 
                            // grab the next line
                            Integer skip = line.length();
                            line += '\n' + this.buffer.remove(0);
                            quoteIndex = findQuote(line, skip);
                        }
                    }
                    // advance to comma
                    next = quoteIndex + 1;
                    parts.add(line.substring(0, quoteIndex).replace('""', '"'));
                } else {
                    next = line.indexOf(this.delim, next);
                    if(next == -1)
                        next = line.length();
                    // NB in Substring, "endindex" is the index of the character AFTER the last index to get
                    parts.add(line.substring(0, next));
                }		
                if(next == line.length() - 1)
                    // case of a terminating comma.
                    parts.add('');
                line = next < line.length() ? line.substring(next+1) : '';
            }
            if(parts.size() == 0)
                // empty string - we still want to return something...
                parts.add('');
            return parts;
        }
        
        /**
         * Find next quote in the line
         */
        private Integer findQuote(String line, Integer skip){
            Matcher m = quotePattern.matcher(line);
            m.region(skip, m.regionEnd());
            if(!m.find())
                return -1;
            return m.start();
        }
    }
}
