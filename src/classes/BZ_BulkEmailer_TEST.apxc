@isTest 
private class BZ_BulkEmailer_TEST {

    static testMethod void validateSendMyQueuedEmails() {
        //System.Debug('BZ_BulkEmailer_TEST:validateSendMyQueuedEmails() begin');

        User sender = [SELECT Id FROM User Where Id = :System.UserInfo.getUserId()];    
        Profile p = [select id from profile where name='Standard User'];
        User anotherSender = new User(alias = 'testSnd2', email='TestEmail.Sender2@bz.org',
                                      emailencodingkey='UTF-8', lastname='TestSender2', languagelocalekey='en_US',
                                      localesidkey='en_US', profileid = p.Id,
                                      timezonesidkey='America/Los_Angeles', username='TestEmail.Sender2@bz.org');
        insert anotherSender;

        Contact recipient = new Contact(FirstName='TestEmail', LastName='Recipient', Email='TestEmail.Recipient@bz.org');
        insert recipient;
        Campaign campaign = BZ_CampaignFactory_TEST.create();
        insert campaign;
        Campaign anotherCampaign = BZ_CampaignFactory_TEST.create();
        anotherCampaign.Name = 'Another Campaign';
        insert anotherCampaign;

        String et1DeveloperName='TestEmailTemplateToSend1';
        String et2DeveloperName='TestEmailTemplateToSend2';

        Task t1 = new Task(Subject='Test Send Email Task1', OwnerId=sender.Id, WhoId=recipient.Id, WhatId=campaign.Id, EmailTemplate__c=et1DeveloperName);
        insert t1;
        Task t2 = new Task(Subject='Test Send Email Task2', OwnerId=sender.Id, WhoId=recipient.Id, WhatId=campaign.Id, EmailTemplate__c=et2DeveloperName);
        insert t2;
        Task t3_ignored = new Task(Subject='Test Send Email Task3 -- Should be ignored', OwnerId=sender.Id, WhoId=recipient.Id, WhatId=campaign.Id);
        insert t3_ignored;
        Task t4_ignored = new Task(Subject='Test Send Email Task4 -- Should be ignored', OwnerId=sender.Id, WhoId=recipient.Id, WhatId=anotherCampaign.Id, EmailTemplate__c='TestEmailTemplateToSend4');
        insert t4_ignored;
        Task t5_ignored = new Task(Subject='Test Send Email Task5 -- Should be ignored', OwnerId=anotherSender.Id, WhoId=recipient.Id, WhatId=campaign.Id, EmailTemplate__c='TestEmailTemplateToSend5');
        insert t5_ignored;

        Integer emailsSent = 0;

        // We do the runAs() b/c of a bug in salesforce where the template is not actually created.  
        // This, in conjunction with the startTest and stopTest below which forces the async future method 
        // to run synchronously: 
        // https://developer.salesforce.com/forums/ForumsMain?id=906F00000008wSQIAY
        System.runAs(sender) 
        {
            Test.startTest();
            // Note, this Util method is to avoid a MIXED_DML_OPERATION error described here: 
            // http://www.tgerm.com/2012/04/mixeddmloperation-dml-operation-on.html        
            BZ_SendTemplatedEmail.insertEmailTemplate('Test Email Template To Send1', et1DeveloperName, 'text', sender.Id);
            BZ_SendTemplatedEmail.insertEmailTemplate('Test Email Template To Send2', et2DeveloperName, 'text', sender.Id);
            Test.stopTest();
        }

        // Run the test
        //System.Debug('BZ_BulkEmailer_TEST: BZ_BulkEmailer.sendMyQueuedEmails(BZ_BulkEmailer.getQueuedEmails(campaign='+campaign+', sender='+sender+'))');
        emailsSent = BZ_BulkEmailer.sendMyQueuedEmails(BZ_BulkEmailer.getQueuedEmails(campaign, sender));

        System.assertEquals(2, emailsSent, 'Expected 2 emails to be sent, not '+emailsSent);
        List<Task> resultingTasks = [SELECT Id, WhoId, WhatId FROM Task
                                     WHERE WhoId IN (:t1.Id, :t2.Id, :t3_ignored.Id, :t4_ignored.Id, :t5_ignored.Id)];
        System.assert(resultingTasks == null || resultingTasks.size() <= 0, 'When sending emails for Tasks with their Email Template To Send field set, they should be deleted afterward so only the history of the email remains (and not that there was a task to send it)');
    }

    static testMethod void validateSendQueuedApplicationDecisions() {
        System.Debug('BZ_BulkEmailer_TEST.validateSendQueuedApplicationDecisions(): begin');

        List<Contact> testContacts = new List<Contact>();
        Contact waitlistedRecipient = new Contact(FirstName='TestWaitlistedEmail', LastName='Recipient', Email='TestWaitlistedEmail.Recipient@bz.org');
        testContacts.add(waitlistedRecipient);
        Contact acceptedRecipient = new Contact(FirstName='TestAcceptedEmail', LastName='Recipient', Email='TestAcceptedEmail.Recipient@bz.org');
        testContacts.add(acceptedRecipient);
        Contact rejectedRecipient = new Contact(FirstName='TestRejectedEmail', LastName='Recipient', Email='TestRejectedEmail.Recipient@bz.org');
        testContacts.add(rejectedRecipient);
        Contact rejectedRecipient_decisionAlreadySent = new Contact(FirstName='TestRejectedEmailAlreadySent', LastName='Recipient', Email='TestRejectedEmailAlreadySent.Recipient@bz.org');
        testContacts.add(rejectedRecipient_decisionAlreadySent);
        Contact rejectedRecipient_anotherCampaign = new Contact(FirstName='TestRejectedEmailAnotherCampaign', LastName='Recipient', Email='TestRejectedEmailAnotherCampaign.Recipient@bz.org');
        testContacts.add(rejectedRecipient_anotherCampaign);
        Contact recipientNoStatusSet = new Contact(FirstName='TestAppDecisionNoStatus', LastName='Recipient', Email='TestAppDecisionNoStatus.Recipient@bz.org');
        testContacts.add(recipientNoStatusSet);
        Contact interviewRequestedRecipient = new Contact(FirstName='TestAppDecisionInterviewRequested', LastName='Recipient', Email='TestAppDecisionInterviewRequested.Recipient@bz.org');
        testContacts.add(interviewRequestedRecipient);
        insert testContacts;
        
        String waitlistedEmailDeveloperName='TestWaitlistedEmailTemplateToSend';
        String acceptedEmailDeveloperName='TestAcceptedEmailTemplateToSend';
        String rejectedEmailDeveloperName='TestRejectedEmailTemplateToSend';
        
        Campaign campaign = BZ_CampaignFactory_TEST.create();
        campaign.Name='Test Send Queued App Decisions Campaign1'; 
        campaign.App_Waitlisted_Email_Template__c=waitlistedEmailDeveloperName;
        campaign.App_Accepted_Email_Template__c=acceptedEmailDeveloperName;
        campaign.App_Rejected_Email_Template__c=rejectedEmailDeveloperName;
        insert campaign; 
        
        Campaign anotherCampaign = BZ_CampaignFactory_TEST.create();
        anotherCampaign.Name='Test Send Queued App Decisions Campaign2'; 
        anotherCampaign.App_Waitlisted_Email_Template__c=waitlistedEmailDeveloperName;
        anotherCampaign.App_Accepted_Email_Template__c=acceptedEmailDeveloperName;
        anotherCampaign.App_Rejected_Email_Template__c=rejectedEmailDeveloperName;
        insert anotherCampaign;
        
        List<CampaignMember> testCms = new List<CampaignMember>();
        CampaignMember waitlistedCm = new CampaignMember(CampaignId=campaign.Id, ContactId=waitlistedRecipient.Id, Candidate_Status__c='Waitlisted');
        testCms.add(waitlistedCm);
        CampaignMember acceptedCm = new CampaignMember(CampaignId=campaign.Id, ContactId=acceptedRecipient.Id, Candidate_Status__c='Accepted');
        testCms.add(acceptedCm);
        CampaignMember rejectedCm = new CampaignMember(CampaignId=campaign.Id, ContactId=rejectedRecipient.Id, Candidate_Status__c='Rejected');
        testCms.add(rejectedCm);
        CampaignMember rejectedCm_decisionAlreadySent = new CampaignMember(CampaignId=campaign.Id, ContactId=rejectedRecipient_decisionAlreadySent.Id, Candidate_Status__c='Rejected', Application_Decision_Sent__c=TRUE);
        testCms.add(rejectedCm_decisionAlreadySent);
        CampaignMember noStatusSetCm_expectNoEmailSent = new CampaignMember(CampaignId=campaign.Id, ContactId=recipientNoStatusSet.Id);
        testCms.add(noStatusSetCm_expectNoEmailSent);
        CampaignMember interviewRequestedCm_expectNoEmailSent = new CampaignMember(CampaignId=campaign.Id, ContactId=interviewRequestedRecipient.Id, Candidate_Status__c='Interview Requested');
        testCms.add(interviewRequestedCm_expectNoEmailSent);
        CampaignMember rejectedCm_anotherCampaign = new CampaignMember(CampaignId=anotherCampaign.Id, ContactId=rejectedRecipient_anotherCampaign.Id, Candidate_Status__c='Rejected');
        testCms.add(rejectedCm_anotherCampaign);
        insert testCms;
        
        Integer emailsSent = 0;
        
        // We do the runAs() b/c of a bug in salesforce where the template is not actually created.  
        // This, in conjunction with the startTest and stopTest below which forces the async future method 
        // to run synchronously: 
        // https://developer.salesforce.com/forums/ForumsMain?id=906F00000008wSQIAY
        User sender = [SELECT Id FROM User Where Id = :System.UserInfo.getUserId()];    
        System.runAs(sender) 
        {
            Test.startTest();
            // Note, this Util method is to avoid a MIXED_DML_OPERATION error described here: 
            // http://www.tgerm.com/2012/04/mixeddmloperation-dml-operation-on.html        
            BZ_SendTemplatedEmail.insertEmailTemplate('Test Waitlisted Email Template', waitlistedEmailDeveloperName, 'text', sender.Id);
            BZ_SendTemplatedEmail.insertEmailTemplate('Test Accepted Email Template', acceptedEmailDeveloperName, 'text', sender.Id);
            BZ_SendTemplatedEmail.insertEmailTemplate('Test Rejected Email Template', rejectedEmailDeveloperName, 'text', sender.Id);
            Test.stopTest();
        }
        
        // Run the test
        System.Debug('BZ_BulkEmailer_TEST: BZ_BulkEmailer.SendQueuedApplicationDecisions(campaign='+campaign+')');
        emailsSent = BZ_BulkEmailer.SendQueuedApplicationDecisions(campaign);
        
        System.assertEquals(3, emailsSent, 'Expected 3 emails to be sent, not '+emailsSent);
        CampaignMember waitlistedCmResult = [SELECT Application_Decision_Sent__c FROM CampaignMember WHERE Id = :waitlistedCm.Id];
        System.assertEquals(TRUE, waitlistedCmResult.Application_Decision_Sent__c);
        CampaignMember acceptedCmResult = [SELECT Application_Decision_Sent__c FROM CampaignMember WHERE Id = :acceptedCm.Id];
        System.assertEquals(TRUE, acceptedCmResult.Application_Decision_Sent__c);
        CampaignMember rejectedCmResult = [SELECT Application_Decision_Sent__c FROM CampaignMember WHERE Id = :rejectedCm.Id];
        System.assertEquals(TRUE, rejectedCmResult.Application_Decision_Sent__c);
    }
}

