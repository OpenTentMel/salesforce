/** 
 * Factory to create Tasks.
 */
public class BZ_TaskFactory {
    
    /**
     * Creates Tasks with the specified CampaignMember's 
     * 'Email Template To Send' field populated with the EmailTemplate 
     * specified in the associated Campaign.<emailTemplateCampaignFieldName>.
     * This is used by the 'Send My Queued Emails button'.
     * 
     * E.g. to have the task use the template in the 
     * Campaign.Intro_Email_Template__c field, call this method like so:
     *    createEmailTask(cm, 'Send Intro Email', 'Intro_Email_Template__c')
     */
    public static Task createEmailTask(CampaignMember cm, String taskSubjectPrefix, String emailTemplateCampaignFieldName) {
        Id contactId = cm.ContactId;
        //System.debug('BZ_TaskFactory: contactId='+contactId);
        Contact contact = [SELECT Id, Name From Contact Where Id = :contactId];
        //System.debug('BZ_TaskFactory: contact='+contact);
        Id campaignId = cm.CampaignId;
        //System.debug('BZ_TaskFactory: campaignId='+campaignId);
        String campaignQueryString = 'SELECT Id, OwnerId, '+emailTemplateCampaignFieldName+
                              ' FROM Campaign WHERE Id = :campaignId';
        SObject campaignObj = Database.query(campaignQueryString);
        Campaign campaign = (Campaign)campaignObj;
        //System.debug('BZ_TaskFactory: campaign='+campaign);                     
        User owner = [SELECT Id FROM User WHERE Id = :campaign.OwnerId];
        //System.debug('BZ_TaskFactory: owner='+owner); 
        
        String emailTemplate = (String)campaignObj.get(emailTemplateCampaignFieldName);
        //System.debug('BZ_TaskFactory: emailTemplate='+emailTemplate);   

        if (emailTemplate == null || emailTemplate == '')
        {
            cm.addError('The email template is not set on the Campaign for: '+emailTemplateCampaignFieldName);
            return null;
        }
        else
        {
            Task t = new Task(
                OwnerId = owner.Id,           // Assigned To
                Subject = taskSubjectPrefix + ' To ' + contact.Name,
                IsReminderSet = true,
                ReminderDateTime = System.now(),
                ActivityDate = Date.today(),      // Due Date
                WhoId = contactId,            // Name
                WhatId = campaignId,          // Related To
                EmailTemplate__c = emailTemplate);    // Email Template To Send
            return t;
        }
    }
    
    /**
     * Creates Tasks for the owner of the Campaign for the specified CampaignMember.
     * 
     * taskSubjectPattern is the Subject of the Task where the name of the CampaignMember
     * is added in the location that you specify.  You specify the location with a single
     * replacement token used with String.format(String,List<String>) method.  
     * e.g. createTask(cm, 'The person {0} need something to happen')
     */
    public static Task createTask(CampaignMember cm, String taskSubjectPattern) {
        Id contactId = cm.ContactId;
        //System.debug('BZ_TaskFactory: contactId='+contactId);
        Contact contact = [SELECT Id, Name From Contact Where Id = :contactId];
        //System.debug('BZ_TaskFactory: contact='+contact);
        Id campaignId = cm.CampaignId;
        //System.debug('BZ_TaskFactory: campaignId='+campaignId);
        Campaign campaign = [SELECT Id, OwnerId FROM Campaign WHERE Id = :campaignId];
        //System.debug('BZ_TaskFactory: campaign='+campaign);                     
        User owner = [SELECT Id FROM User WHERE Id = :campaign.OwnerId];
        //System.debug('BZ_TaskFactory: owner='+owner); 
       
        Task t = new Task(
                OwnerId = owner.Id,           // Assigned To
                Subject = System.String.format(taskSubjectPattern, new String[]{contact.Name}),
                IsReminderSet = true,
                ReminderDateTime = System.now(),
                ActivityDate = Date.today(),      // Due Date
                WhoId = contactId,            // Name
                WhatId = campaignId);               // Related To
        return t;
    }
    
    /**
     * Creates Tasks for the owner of the Lead.
     * 
     * taskSubjectPattern is the Subject of the Task where the name of the Lead
     * is added in the location that you specify.  You specify the location with a single
     * replacement token used with String.format(String,List<String>) method.  
     * e.g. createTask(lead, 'The person {0} needs something to happen')
     */
    public static Task createTask(Lead lead, String taskSubjectPattern, String description) {
        // For some reason, the Lead.Name is null in a create trigger: https://developer.salesforce.com/forums/ForumsMain?id=906F00000008yQ5IAI
        String name = lead.FirstName + ' ' + lead.LastName;
        Task t = new Task(
                OwnerId = lead.OwnerId,           // Assigned To
                Subject = System.String.format(taskSubjectPattern, new String[]{name}),
                Description = description,
                IsReminderSet = true,
                ReminderDateTime = System.now(),
                ActivityDate = Date.today(),      // Due Date
                WhoId = lead.Id);                     // Name
        return t;
    }
}
