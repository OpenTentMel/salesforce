@isTest 
private class BZ_BulkInviteController_TEST {
    static testMethod void validateInvite() {
        System.debug('BZ_BulkInviteController_TEST.validateInvite() - begin');
        List<Contact> contactsToInsert = new List<Contact>();
        Contact campaignOwner = new Contact(FirstName='Test', LastName='CampaignOwner', OwnerId=userInfo.getUserId());
        contactsToInsert.add(campaignOwner);
        String existingEmail1 = 'brian.testexisting1@example.com';
        Contact existingContact1 = new Contact(FirstName='Brian', LastName='xTestExisting1', Email=existingEmail1, OwnerId=userInfo.getUserId());
        contactsToInsert.add(existingContact1);
        String existingEmailInactiveCampaign1 = 'brian.testexistinginactivecampaign1@example.com';
        Contact existingContactInactiveCampaign1 = new Contact(FirstName='Brian', LastName='xTestExistingInactiveCampaign1', Email=existingEmailInactiveCampaign1, OwnerId=userInfo.getUserId());
        contactsToInsert.add(existingContactInactiveCampaign1);
        String existingEmailActiveCampaign1 = 'brian.testexistingactivecampaign1@example.com';
        Contact existingContactActiveCampaign1 = new Contact(FirstName='Brian', LastName='xTestExistingActiveCampaign1', Email=existingEmailActiveCampaign1, OwnerId=userInfo.getUserId());
        contactsToInsert.add(existingContactActiveCampaign1);
        String existingEmailAlreadyInCampaign1 = 'brian.testexistingaleadyincampaign1@example.com';
        Contact existingContactAlreadyInCampaign1 = new Contact(FirstName='Brian', LastName='xTestExistingAlreadyInCampaign1', Email=existingEmailAlreadyInCampaign1, OwnerId=userInfo.getUserId());
        contactsToInsert.add(existingContactAlreadyInCampaign1);
        insert contactsToInsert;

        // Note: the Campaign.OwnerId refers to the User, so we need to use campaignOwner.OwnerId instead of Id.  See the child relationship of the User object.
        List<Campaign> campaignsToInsert = new List<Campaign>();
        Campaign campaignToInviteTo = BZ_CampaignFactory_TEST.create(campaignOwner.OwnerId, 'Program Participants');
        campaignToInviteTo.Invite_Email_Template__c = 'BZ INVITE: test template';
        campaignToInviteTo.Name = 'campaignToInviteTo';
        campaignToInviteTo.IsActive = true;
        campaignsToInsert.add(campaignToInviteTo);
        
        Campaign inactiveCampaign = BZ_CampaignFactory_TEST.create(campaignOwner.OwnerId, 'Program Participants');
        inactiveCampaign.Invite_Email_Template__c = 'BZ INVITE: test template';
        inactiveCampaign.IsActive = false;
        inactiveCampaign.Name = 'inactiveCampaign';
        campaignsToInsert.add(inactiveCampaign);
        
        Campaign activeCampaign = BZ_CampaignFactory_TEST.create(campaignOwner.OwnerId, 'Leadership Coaches');
        activeCampaign.Invite_Email_Template__c = 'BZ INVITE: test template';
        activeCampaign.IsActive = true;
        activeCampaign.Name = 'activeCampaign';
        campaignsToInsert.add(activeCampaign);
        
        insert campaignsToInsert;
        
        List<CampaignMember> existingCampaignMembersToInsert = new List<CampaignMember>();
        CampaignMember existingInactiveCm = new CampaignMember();
        existingInactiveCm.CampaignId=inactiveCampaign.Id;
        existingInactiveCm.ContactId=existingContactInactiveCampaign1.Id;
        existingCampaignMembersToInsert.add(existingInactiveCm);
        
        CampaignMember existingActiveCm = new CampaignMember();
        existingActiveCm.CampaignId=activeCampaign.Id;
        existingActiveCm.ContactId=existingContactActiveCampaign1.Id;
        existingCampaignMembersToInsert.add(existingActiveCm);
        
        CampaignMember existingAlreadyCm = new CampaignMember();
        existingAlreadyCm.CampaignId=campaignToInviteTo.Id;
        existingAlreadyCm.ContactId=existingContactAlreadyInCampaign1.Id;
        existingCampaignMembersToInsert.add(existingAlreadyCm);
        
        insert existingCampaignMembersToInsert;

        BZ_SettingsFactory_TEST.setSettings();
        System.assert(BZ_Settings__c.getInstance('bz') != null, 'BZ_Settings__c is null');

        ApexPages.StandardController sc = new ApexPages.standardController(campaignToInviteTo);
        PageReference pageRef = Page.BZ_BulkInvite;
        Test.setCurrentPage(pageRef);

        String interactionDescription = 'Description of phone call';
        BZ_BulkInviteController controller = new BZ_BulkInviteController(sc);
        
        // Note: we do a toUpperCase on the existing email b/c we want to make sure that bulk invite
        // doesn't create a duplicate contact if the case changes since SF stores emails in all lower.
        String csvContents = 'FirstName,LastName,Email,Phone,InteractionType,InterationDescription\n'+
            'Brian,xTest1,brian.test1@example.com,5554443333,Phone Call,'+interactionDescription+'\n'+
            'Brian,xTest2,Brian.Test2@example.com,,Phone Call,'+interactionDescription+'\n'+
            'Brian,xTestExisting1,'+existingEmail1.toUpperCase()+',5554443334,Phone Call,'+interactionDescription+'\n'+
            'Brian,xTestExistingAlreadyInCampaign1,'+existingEmailAlreadyInCampaign1+',5554443334,Phone Call,'+interactionDescription+'\n'+
            'Brian,xTestExistingInactiveCamapign1,'+existingEmailInactiveCampaign1+',5554443334,Phone Call,'+interactionDescription+'\n'+
            'Brian,xTestExistingActiveCampaign1,'+existingEmailActiveCampaign1+',5554443334,Phone Call,'+interactionDescription+'\n';

        String primaryAffiliationName = campaignToInviteTo.Program_Site__c;
        String undergradUniversityName = campaignToInviteTo.Program_Site__c;
        
        Test.startTest();
        PageReference result = controller.ProcessFile(csvContents);
        controller.checkComplete(); // Call the method during the run to mimic VisualForce page
        Test.stopTest(); // Force the queued background worker process to complete
        controller.checkComplete(); // Call the method after the run to mimic VisualForce page
        
        String textMessageBody = controller.getTextMessageBody();
        controller.setTextMessageBody(textMessageBody + 'SLIGHTLY CHANGED!');
        if (controller.getContactsLoaded() && !String.isEmpty(controller.getContactsToInviteDisplay()))
        {
            controller.sendTextMessages();
        }
        
        System.assertEquals(false, BZ_BulkInviteController.IsBulkInviteRunning);
        System.assert(controller.getTextMessagesSent(), 'Text messages not sent!');
        System.assert(controller.getHaveContactsBeenInvited(), 'Expected contacts to have been invited');
        System.assert(controller.getHaveContactsBeenSkipped(), 'Expected contacts to have been skipped');
        List<Contact> duplicateExsitingContacts = [SELECT Id FROM Contact WHERE Email = :existingEmail1];
        System.assert(duplicateExsitingContacts.size() == 1, 'Expected 1 contact with email: ' + existingEmail1 + '.  Found: ' + duplicateExsitingContacts.size());
        Set<Id> contactIdsWithInitialConnectionSet = new Set<Id>();
        System.assert(controller.getContactsSkippedDisplay().contains(existingEmailAlreadyInCampaign1), 'Expected existing campaign member to be skipped.  Here are the ones skipped: ' + controller.getContactsSkippedDisplay() + ' -- which doesnt contain: ' + existingEmailAlreadyInCampaign1);
        List<CampaignMember> campaignMembers = [SELECT Id, Name, FirstName, LastName, Email, Phone, ContactId, Undergrad_University__c FROM CampaignMember WHERE CampaignId = :campaignToInviteTo.Id AND ContactId <> :existingContactAlreadyInCampaign1.Id];
        System.Assert(campaignMembers.size() == 5, 'Expected 5 CampaignMembers. Found '+campaignMembers.size());
        for (CampaignMember cm : campaignMembers)
        {
            contactIdsWithInitialConnectionSet.add(cm.ContactId);
            System.assert(cm.Undergrad_University__c == undergradUniversityName, 'Expected Undergrad University to be set to: ' + undergradUniversityName + '.  Found: ' + cm.Undergrad_University__c + ' instead.');
            System.assert(cm.FirstName == 'Brian', 'CampaignMember with First Name found not in list of expected members: FirstName = ' + cm.FirstName);
            System.assert(cm.LastName.startsWith('xTest'), 'CampaignMember with Last Name found not in list of expected members: LastName = ' + cm.LastName);
            System.assert(cm.Email.startsWith('brian.test'), 'CampaignMember with Email found not in list of expected members: Email = ' + cm.Email);
            System.assert(cm.Phone == null || cm.Phone == '' || cm.Phone == '5554443333' || cm.Phone == '5554443334' || cm.Phone == '5554443335', 
                          'CampaignMember with Phone found not in list of expected members: Phone = ' + cm.Phone);
                        
        }
        List<Task> tasks = [SELECT Id, Subject, WhoId, WhatId, Status, Interaction_Type__c, Description, EmailTemplate__c FROM Task WHERE WhatId = :campaignToInviteTo.Id AND WhoId <> :existingContactAlreadyInCampaign1.Id];
        for (Task t : tasks){
            System.debug('Found task: '+t);
        }
        System.Assert(tasks.size() == 14, 'Expected 5 INVITE Tasks, 4 Text Message tasks, and 5 Interation tasks. Found '+tasks.size()+' total tasks');
        for (Task t : tasks)
        {
            if (t.Subject.startsWith('Email:')){
                System.assert(t.EmailTemplate__c.startsWith('BZ INVITE:'), 'Expected BZ INVITE: email template.  Found EmailTemplate__c = ' + t.EmailTemplate__c);
            }
            else if (t.Subject.startsWith('Interaction:'))
            {
                System.assert(t.WhoId == campaignMembers[0].ContactId || 
                              t.WhoId == campaignMembers[1].ContactId || 
                              t.WhoId == campaignMembers[2].ContactId ||
                              t.WhoId == campaignMembers[3].ContactId || 
                              t.WhoId == campaignMembers[4].ContactId || 
                              t.WhoId == campaignMembers[5].ContactId, 
                              'Task with WhoId found not in list of expected tasks: Interaction_Type__c = ' + t.WhoId);
                System.assert(t.WhatId == campaignToInviteTo.Id, 'Task with WhatId found not in list of expected tasks: WhatId = ' + t.WhatId);
                System.assert(t.Status == 'Completed', 'Task with Status found not in list of expected tasks: Status = ' + t.Status);
                System.assert(t.Interaction_Type__c == 'Phone Call', 'Task with Interaction_Type__c found not in list of expected tasks: Interaction_Type__c = ' + t.Interaction_Type__c + ' t = ' + t);
                System.assert(t.Description == interactionDescription, 'Task with Description found not in list of expected tasks: Description = ' + t.Description + ' t = ' + t);

            }
            else if (t.Subject.startsWith('Text Message:')){
                System.assert(t.Status == 'Completed', 'Expected Text Message task to be Completed.  t = '+t);
                System.assert(t.Interaction_Type__c == 'Text Message', 'Expected Text Message task to have Interaction Type set.  t = '+t);
            }
            else
            {
                System.assert(false, 'Task found with unrecognized subject = ' + t.Subject);
            }
        }

        List<Contact> contacts = [SELECT Id, Email, Initial_Connection__c, Undergrad_University__c, npsp__Primary_Affiliation__c FROM Contact WHERE Id in :contactIdsWithInitialConnectionSet];
        for (Contact c : contacts){
            System.assert(c.Initial_Connection__c == interactionDescription, 'Unrecognized Initial Connection.  Expected '+interactionDescription+'. Found c.Initial_Connection__c = ' + c.Initial_Connection__c);
            System.assert(c.Undergrad_University__c == undergradUniversityName, 'Expected Undergrad University to be set to: ' + undergradUniversityName + '.  Found: ' + c.Undergrad_University__c + ' instead.');
            List<Account> primaryAffiliationAccounts = [SELECT Id FROM Account WHERE Name = :primaryAffiliationName];
            Id primaryAffiliationId = primaryAffiliationAccounts[0].Id;
            System.assert(c.npsp__Primary_Affiliation__c == primaryAffiliationId, 'Expected Primary Affiliation to be set to: ' + primaryAffiliationName + '.  Found: ' + [SELECT Name FROM Account WHERE Id = :c.npsp__Primary_Affiliation__c] + ' instead.');
        }
    }
    
    static testMethod void validateInviteDuplicateContacts() {
        System.debug('BZ_BulkInviteController_TEST.validateInviteDuplicateContacts() - begin');
        List<Contact> contactsToInsert = new List<Contact>();
        Contact campaignOwner = new Contact(FirstName='Test', LastName='CampaignOwner', OwnerId=userInfo.getUserId());
        contactsToInsert.add(campaignOwner);
        String existingEmail1 = 'brian.testexisting1@example.com';
        Contact existingContact1 = new Contact(FirstName='Brian', LastName='xTestExisting1', Email=existingEmail1, OwnerId=userInfo.getUserId());
        contactsToInsert.add(existingContact1);
        Contact existingContact2 = new Contact(FirstName='Brian', LastName='xTestExisting1', Email=existingEmail1, OwnerId=userInfo.getUserId());
        contactsToInsert.add(existingContact2);
        insert contactsToInsert;

        // Note: the Campaign.OwnerId refers to the User, so we need to use campaignOwner.OwnerId instead of Id.  See the child relationship of the User object.
        List<Campaign> campaignsToInsert = new List<Campaign>();
        Campaign campaignToInviteTo = BZ_CampaignFactory_TEST.create(campaignOwner.OwnerId, 'Program Participants');
        campaignToInviteTo.Invite_Email_Template__c = 'BZ INVITE: test template';
        campaignToInviteTo.Name = 'campaignToInviteTo';
        campaignToInviteTo.IsActive = true;
        campaignsToInsert.add(campaignToInviteTo);
        insert campaignsToInsert;

        BZ_SettingsFactory_TEST.setSettings();
        System.assert(BZ_Settings__c.getInstance('bz') != null, 'BZ_Settings__c is null');

        ApexPages.StandardController sc = new ApexPages.standardController(campaignToInviteTo);
        PageReference pageRef = Page.BZ_BulkInvite;
        Test.setCurrentPage(pageRef);

        String interactionDescription = 'Description of phone call';
        BZ_BulkInviteController controller = new BZ_BulkInviteController(sc);
        
        String csvContents = 'FirstName,LastName,Email,Phone,InteractionType,InterationDescription\n'+
            'Brian,xTestExisting1,'+existingEmail1+',5554443334,Phone Call,'+interactionDescription+'\n';

        Test.startTest();
        PageReference result = controller.ProcessFile(csvContents);
        controller.checkComplete(); // Call the method during the run to mimic VisualForce page
        Test.stopTest(); // Force the queued background worker process to complete
        controller.checkComplete(); // Call the method after the run to mimic VisualForce page        
        
        System.assertEquals(false, BZ_BulkInviteController.IsBulkInviteRunning);
        System.assert(controller.getHaveContactsBeenInvited(), 'Expected contacts to have been invited');
        List<Contact> duplicateExsitingContacts = [SELECT Id FROM Contact WHERE Email = :existingEmail1];
        System.assert(duplicateExsitingContacts.size() == 2, 'Expected 2 contacts with email: ' + existingEmail1 + '.  Found: ' + duplicateExsitingContacts.size());
        List<CampaignMember> campaignMembers = [SELECT Id, Name, FirstName, LastName, Email, Phone, ContactId, Undergrad_University__c FROM CampaignMember WHERE CampaignId = :campaignToInviteTo.Id];
        System.Assert(campaignMembers.size() == 1, 'Expected 1 CampaignMembers. Found '+campaignMembers.size());
        for (CampaignMember cm : campaignMembers)
        {
            System.assert(cm.FirstName == 'Brian', 'CampaignMember with First Name found not in list of expected members: FirstName = ' + cm.FirstName);
            System.assert(cm.LastName.startsWith('xTest'), 'CampaignMember with Last Name found not in list of expected members: LastName = ' + cm.LastName);
            System.assert(cm.Email == existingEmail1, 'CampaignMember with Email found not in list of expected members: Email = ' + cm.Email);                        
        }
        List<Task> tasks = [SELECT Id, Subject, WhoId, WhatId, Status, Interaction_Type__c, Description, EmailTemplate__c FROM Task WHERE WhatId = :campaignToInviteTo.Id];
        for (Task t : tasks){
            System.debug('Found task: '+t);
        }
        System.Assert(tasks.size() == 2, 'Expected 1 INVITE Tasks and 1 Interaction task. Found '+tasks.size()+' total tasks');
        for (Task t : tasks)
        {
            if (t.Subject.startsWith('Email:')){
                System.assert(t.EmailTemplate__c.startsWith('BZ INVITE:'), 'Expected BZ INVITE: email template.  Found EmailTemplate__c = ' + t.EmailTemplate__c);
            }
            else if (t.Subject.startsWith('Interaction:'))
            {
                System.assert(t.WhoId == campaignMembers[0].ContactId, 
                              'Task with WhoId found not in list of expected tasks: Interaction_Type__c = ' + t.WhoId);
                System.assert(t.WhatId == campaignToInviteTo.Id, 'Task with WhatId found not in list of expected tasks: WhatId = ' + t.WhatId);
                System.assert(t.Status == 'Completed', 'Task with Status found not in list of expected tasks: Status = ' + t.Status);
                System.assert(t.Interaction_Type__c == 'Phone Call', 'Task with Interaction_Type__c found not in list of expected tasks: Interaction_Type__c = ' + t.Interaction_Type__c + ' t = ' + t);
                System.assert(t.Description == interactionDescription, 'Task with Description found not in list of expected tasks: Description = ' + t.Description + ' t = ' + t);

            }
            else
            {
                System.assert(false, 'Task found with unrecognized subject = ' + t.Subject);
            }
        }
    }

    static testMethod void validateFailed() {
        System.debug('BZ_BulkInviteController_TEST.validateFailed() - begin');
        List<Contact> contactsToInsert = new List<Contact>();
        Contact campaignOwner = new Contact(FirstName='Test', LastName='CampaignOwner', OwnerId=userInfo.getUserId());
        contactsToInsert.add(campaignOwner);
        insert contactsToInsert;

        // Note: the Campaign.OwnerId refers to the User, so we need to use campaignOwner.OwnerId instead of Id.  See the child relationship of the User object.
        Campaign campaign = BZ_CampaignFactory_TEST.create(campaignOwner.OwnerId, 'Leadership Coaches');
        campaign.Invite_Email_Template__c = 'BZ INVITE: test template';
        insert campaign;

        BZ_SettingsFactory_TEST.setSettings();
        System.assert(BZ_Settings__c.getInstance('bz') != null, 'BZ_Settings__c is null');

        ApexPages.StandardController sc = new ApexPages.standardController(campaign);
        PageReference pageRef = Page.BZ_BulkInvite;
        Test.setCurrentPage(pageRef);

      BZ_BulkInviteController controller = new BZ_BulkInviteController(sc);
        String csvContents = 'FirstName,LastName,Email,Phone,InteractionType,InterationDescription\n'+
            'Brian,xTest1,,5554443333,Phone Call,Description of phone call\n'+
            'Brian,xTest5,email@email.com,badPhone,Phone Call,Description of phone call\n'+
            'Brian,,brian.test2@example.com,,Phone Call,Description of phone call\n'+
            ',,brian.test3@example.com,,Phone Call,Description of phone call\n'+
            'Brian,xTest3\n'+
            'Brian,xTest4,badEmail,badPhone,,\n'+
            'badRow\n';

        Boolean exceptionCaught = false;
        Test.startTest();
        try {
            PageReference result = controller.ProcessFile(csvContents);
            Test.stopTest();
        } catch(Exception e){
            exceptionCaught = true;
        }

        System.assertEquals(false, BZ_BulkInviteController.IsBulkInviteRunning);
        System.AssertEquals(true, exceptionCaught);
        System.assert(controller.getTextMessagesSent() == false, 'Text messages should not be sent!');

        List<CampaignMember> campaignMembers = [SELECT Id, Name, FirstName, LastName, Email, Phone, ContactId FROM CampaignMember WHERE CampaignId = :campaign.Id];
        System.Assert(campaignMembers.size() == 0, 'Expected 0 CampaignMembers. Found '+campaignMembers.size());
    }
    
    static testMethod void validateFailedNoInteractionInfo() {
        System.debug('BZ_BulkInviteController_TEST.validateFailedNoInteractionInfo() - begin');
        List<Contact> contactsToInsert = new List<Contact>();
        Contact campaignOwner = new Contact(FirstName='Test', LastName='CampaignOwner', OwnerId=userInfo.getUserId());
        contactsToInsert.add(campaignOwner);
        insert contactsToInsert;

        // Note: the Campaign.OwnerId refers to the User, so we need to use campaignOwner.OwnerId instead of Id.  See the child relationship of the User object.
        Campaign campaign = BZ_CampaignFactory_TEST.create(campaignOwner.OwnerId, 'Leadership Coaches');
        campaign.Invite_Email_Template__c = 'BZ INVITE: test template';
        insert campaign;

        BZ_SettingsFactory_TEST.setSettings();
        System.assert(BZ_Settings__c.getInstance('bz') != null, 'BZ_Settings__c is null');

        ApexPages.StandardController sc = new ApexPages.standardController(campaign);
        PageReference pageRef = Page.BZ_BulkInvite;
        Test.setCurrentPage(pageRef);

      BZ_BulkInviteController controller = new BZ_BulkInviteController(sc);
        String csvContents = 'FirstName,LastName,Email,Phone,InteractionType,InterationDescription\n'+
            'Brian,xTest1,email1@email.com,5554443333,Phone Call,Description of phone call\n'+
            'Brian,xTest5,email2@email.com,5554443333,,\n';

        Boolean exceptionCaught = false;
        Test.startTest();
        try {
            PageReference result = controller.ProcessFile(csvContents);
            Test.stopTest();            
        } catch(BZ_BulkInviteController.BZ_BulkInviteException e){
            exceptionCaught = true;
        }

        System.assertEquals(false, BZ_BulkInviteController.IsBulkInviteRunning);
        System.AssertEquals(true, exceptionCaught);

        List<CampaignMember> campaignMembers = [SELECT Id, Name, FirstName, LastName, Email, Phone, ContactId FROM CampaignMember WHERE CampaignId = :campaign.Id];
        System.Assert(campaignMembers.size() == 0, 'Expected 0 CampaignMembers. Found '+campaignMembers.size());
    }

    static testMethod void validateFailedTextSend() {
        System.debug('BZ_BulkInviteController_TEST.validateFailedTextSend() - begin');
        List<Contact> contactsToInsert = new List<Contact>();
        Contact campaignOwner = new Contact(FirstName='Test', LastName='CampaignOwner', OwnerId=userInfo.getUserId());
        contactsToInsert.add(campaignOwner);
        insert contactsToInsert;

        // Note: the Campaign.OwnerId refers to the User, so we need to use campaignOwner.OwnerId instead of Id.  See the child relationship of the User object.
        Campaign campaign = BZ_CampaignFactory_TEST.create(campaignOwner.OwnerId, 'Leadership Coaches');
        campaign.Invite_Email_Template__c = 'BZ INVITE: test template';
        insert campaign;

        BZ_SettingsFactory_TEST.setSettings();

        ApexPages.StandardController sc = new ApexPages.standardController(campaign);
        PageReference pageRef = Page.BZ_BulkInvite;
        Test.setCurrentPage(pageRef);
        BZ_BulkInviteController controller;
        Test.startTest();
        try {
            BZ_BulkTexter.SimilateExceptionWhileSendingTexts = true;
            controller = new BZ_BulkInviteController(sc);
            String csvContents = 'FirstName,LastName,Email,Phone,InteractionType,InterationDescription\n'+
                'Brian,xTest1,email@email.com,5554443333,Phone Call,Description of phone call\n'+
                'Brian,xTest2,email2@email.com,5554443334,Phone Call,Description of phone call\n';
            PageReference result = controller.ProcessFile(csvContents);
            Test.stopTest(); // This forces the background queued process to complete
            if (controller.getContactsLoaded() && !String.isEmpty(controller.getContactsToInviteDisplay()))
            {
                controller.sendTextMessages();
            }
        } finally {
            BZ_BulkTexter.SimilateExceptionWhileSendingTexts = false;
        }

        System.assertEquals(false, BZ_BulkInviteController.IsBulkInviteRunning);
        System.assert(!String.isEmpty(controller.getResultMessage()), 'Result Message should be set');
        System.assert(controller.getResultMessage().contains('Failed sending text messages to the following phone numbers'),'The result message of trying to send texts isnt what was expected.  Actual: '+controller.getResultMessage());
    }

    static testMethod void validateBadCsv() {
        System.debug('BZ_BulkInviteController_TEST.validateBadCsv() - begin');
        List<Contact> contactsToInsert = new List<Contact>();
        Contact campaignOwner = new Contact(FirstName='Test', LastName='CampaignOwner', OwnerId=userInfo.getUserId());
        contactsToInsert.add(campaignOwner);
        insert contactsToInsert;

        // Note: the Campaign.OwnerId refers to the User, so we need to use campaignOwner.OwnerId instead of Id.  See the child relationship of the User object.
        Campaign campaign = BZ_CampaignFactory_TEST.create(campaignOwner.OwnerId, 'Leadership Coaches');
        campaign.Invite_Email_Template__c = 'BZ INVITE: test template';
        insert campaign;

        BZ_SettingsFactory_TEST.setSettings();
        System.assert(BZ_Settings__c.getInstance('bz') != null, 'BZ_Settings__c is null');

        ApexPages.StandardController sc = new ApexPages.standardController(campaign);
        PageReference pageRef = Page.BZ_BulkInvite;
        Test.setCurrentPage(pageRef);

      BZ_BulkInviteController controller = new BZ_BulkInviteController(sc);
        String csvContents = '';

        Test.startTest();
        PageReference result = controller.ProcessFile(csvContents);
        Test.stopTest();

        System.assertEquals(false, BZ_BulkInviteController.IsBulkInviteRunning);
        System.assert(!String.isEmpty(controller.getResultMessage()), 'Result Message should be set');
        System.assert(controller.getTextMessagesSent() == false, 'Text messages should not be sent!');

        List<CampaignMember> campaignMembers = [SELECT Id, Name, FirstName, LastName, Email, Phone, ContactId FROM CampaignMember WHERE CampaignId = :campaign.Id];
        System.Assert(campaignMembers.size() == 0, 'Expected 0 CampaignMembers. Found '+campaignMembers.size());
    }
}
