@isTest 
private class BZ_MoveCampaignMemberController_TEST {
    static testMethod void validateRun() {
        Contact campaignOwner = new Contact(FirstName='Test', LastName='CampaignOwner', OwnerId=userInfo.getUserId());
        insert campaignOwner;
        Contact contact = new Contact(FirstName='Test', LastName='User1000');
        insert contact;
        
        // Note: the Campaign.OwnerId refers to the User, so we need to use campaignOwner.OwnerId instead of Id.  See the child relationship of the User object.
        Campaign campaignFrom = BZ_CampaignFactory_TEST.create(campaignOwner.OwnerId, 'Program Participants');
        insert campaignFrom;
        
        CampaignMember cm = new CampaignMember(CampaignId=campaignFrom.Id, ContactId=contact.Id);
        cm.Candidate_Status__c = 'Waitlisted';
        cm.Application_Status__c = 'Submitted';
        insert cm;
        
        Campaign campaignTo = BZ_CampaignFactory_TEST.create(campaignOwner.OwnerId, 'Program Participants');
        insert campaignTo;
        
        Task t1open = new Task(Subject='Test CampaignOpenTask', CampaignMemberId__c=cm.Id, WhoId=contact.Id, WhatId=campaignFrom.Id);
        insert t1open;
        Task t2completed = new Task(Subject='Test CampaignClosedTask', CampaignMemberId__c=cm.Id, WhoId=contact.Id, WhatId=campaignFrom.Id, Status='Completed');
        insert t2completed;
        
      ApexPages.StandardController sc = new ApexPages.standardController(cm);
            
        PageReference pageRef = Page.BZ_CloseRecruitment;
        Test.setCurrentPage(pageRef);
        
      BZ_MoveCampaignMemberController controller = new BZ_MoveCampaignMemberController(sc);
        controller.newCampaignLookup.CampaignId = campaignTo.Id;
        PageReference result = controller.run();
        
        System.Assert(result != null, 'controller.run() returned null');
        List<CampaignMember> campaignMembers = [SELECT Id, CampaignId, ContactId, Candidate_Status__c, Application_Status__c FROM CampaignMember WHERE CampaignId = :campaignTo.Id];
        System.Assert(campaignMembers.size() == 1, 'Expected 1 CampaignMember to be moved. Found '+campaignMembers.size());
        CampaignMember updatedCm = campaignMembers.get(0);
        System.Assert(updatedCm.ContactId == cm.ContactId, 'ContactId is wrong, it should be : ' + cm.ContactId + ' instead of: ' + updatedCm.ContactId);
        System.Assert(updatedCm.Candidate_Status__c == cm.Candidate_Status__c, 'Candidate_Status__c should not have been changed to: ' + updatedCm.Candidate_Status__c);
        System.Assert(updatedCm.Application_Status__c == cm.Application_Status__c, 'The Application_Status__c should not have been changed to: ' + updatedCm.Application_Status__c);
        List<Task> tasks = [SELECT Id, WhoId, Subject, EmailTemplate__c FROM Task WHERE WhatId = :campaignTo.Id];
        Boolean foundT1open = false;
        Boolean foundT2completed = false;
        for (Task t : tasks)
        {
            if (t.Subject == t1open.Subject) {
                foundT1open = true;
            }
            if (t.Subject == t2completed.Subject){
                foundT2completed = true;
            }
        }
        System.Assert(foundT1open, 'Task was not copied over: ' + t1open);
        System.Assert(foundT2completed, 'Task was not copied over: ' + t2completed);
        
    }
    
    static testMethod void validateReinviteEmailTemplateNotSet() {
        Contact campaignOwner = new Contact(FirstName='Test', LastName='CampaignOwner2', OwnerId=userInfo.getUserId());
        insert campaignOwner;
        Contact contact = new Contact(FirstName='Test', LastName='User1001');
        insert contact;
        
        // Note: the Campaign.OwnerId refers to the User, so we need to use campaignOwner.OwnerId instead of Id.  See the child relationship of the User object.
        Campaign campaignFrom = BZ_CampaignFactory_TEST.create(campaignOwner.OwnerId, 'Program Participants');
        insert campaignFrom;
        
        CampaignMember cm = new CampaignMember(CampaignId=campaignFrom.Id, ContactId=contact.Id);
        cm.Candidate_Status__c = 'Waitlisted';
        cm.Application_Status__c = 'Submitted';
        insert cm;
        
        Campaign campaignTo = BZ_CampaignFactory_TEST.create(campaignOwner.OwnerId, 'Program Participants');
        insert campaignTo;
                
      ApexPages.StandardController sc = new ApexPages.standardController(cm);
            
        PageReference pageRef = Page.BZ_CloseRecruitment;
        Test.setCurrentPage(pageRef);
        
      BZ_CopyCampaignMemberController controller = new BZ_CopyCampaignMemberController(sc);
        controller.newCampaignLookup.CampaignId = campaignTo.Id;
        PageReference result = controller.run();
        
        System.Assert(result == null, 'controller.run() should return null');
        System.Assert(ApexPages.hasMessages(), 'An error message should be added to the page');
    }
    
    static testMethod void validateBothCampaignsActive() {
        Contact campaignOwner = new Contact(FirstName='Test', LastName='CampaignOwner3', OwnerId=userInfo.getUserId());
        insert campaignOwner;
        Contact contact = new Contact(FirstName='Test', LastName='User1003');
        insert contact;
        
        // Note: the Campaign.OwnerId refers to the User, so we need to use campaignOwner.OwnerId instead of Id.  See the child relationship of the User object.
        Campaign campaignFrom = BZ_CampaignFactory_TEST.create(campaignOwner.OwnerId, 'Program Participants');
        campaignFrom.IsActive = true;
        insert campaignFrom;
        
        CampaignMember cm = new CampaignMember(CampaignId=campaignFrom.Id, ContactId=contact.Id);
        cm.Candidate_Status__c = 'Waitlisted';
        cm.Application_Status__c = 'Submitted';
        insert cm;
        
        Campaign campaignTo = BZ_CampaignFactory_TEST.create(campaignOwner.OwnerId, 'Program Participants');
        String reinviteEmailTemplateNameTo = 'reinviteEmailTemplateTo';
        campaignTo.Previous_Candidate_New_Invite__c = reinviteEmailTemplateNameTo;
        campaignTo.IsActive = true;
        insert campaignTo;
                
      ApexPages.StandardController sc = new ApexPages.standardController(cm);
            
        PageReference pageRef = Page.BZ_CloseRecruitment;
        Test.setCurrentPage(pageRef);
        
      BZ_CopyCampaignMemberController controller = new BZ_CopyCampaignMemberController(sc);
        controller.newCampaignLookup.CampaignId = campaignTo.Id;
        PageReference result = controller.run();
        
        System.Assert(result == null, 'controller.run() should return null');
        System.Assert(ApexPages.hasMessages(), 'An error message should be added to the page');
    }
}
