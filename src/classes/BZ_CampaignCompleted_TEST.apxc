@isTest 
private class BZ_CampaignCompleted_TEST {
    static testMethod void validateFellowAndLC() {
        System.debug('BZ_CampaignCompleted_TEST.validateFellowAndLC - begin');
        BZ_SettingsFactory_TEST.setSettings();
        System.assert(BZ_Settings__c.getInstance('bz') != null, 'BZ_Settings__c is null');
        List<Contact> contactsToInsert = new List<Contact>();
        Contact fellowContact1 = new Contact(FirstName='Test', LastName='Fellow1', Email='testfellow1@bebraven.org', Participant_Information__c='Participant Pipeline');
        contactsToInsert.add(fellowContact1);
        Contact fellowContact2 = new Contact(FirstName='Test', LastName='Fellow2', Email='testfellow2@bebraven.org', Participant_Information__c='Participant Pipeline');
        contactsToInsert.add(fellowContact2);
        Contact lcContact1 = new Contact(FirstName='Test', LastName='LC1', Email='testlc1@bebraven.org', Volunteer_Information__c='LC Pipeline');
        contactsToInsert.add(lcContact1);
        Contact lcContact2 = new Contact(FirstName='Test', LastName='LC2', Email='testlc2@bebraven.org', Volunteer_Information__c='LC Pipeline');
        contactsToInsert.add(lcContact2);

        insert contactsToInsert;
        
        List<Campaign> campaignsToInsert = new List<Campaign>();
        Campaign lcCampaign = BZ_CampaignFactory_TEST.create(userInfo.getUserId(), 'Leadership Coaches');
        lcCampaign.IsActive = false;
        lcCampaign.Status = 'In Progress';
        campaignsToInsert.add(lcCampaign);
        
        Campaign fellowCampaign = BZ_CampaignFactory_TEST.create(userInfo.getUserId(), 'Program Participants');
        fellowCampaign.IsActive = false;
        fellowCampaign.Status = 'In Progress';
        campaignsToInsert.add(fellowCampaign);

        insert campaignsToInsert;
        
        List<CampaignMember> campaignMembersToInsert = new List<CampaignMember>();
        CampaignMember lcCm1 = new CampaignMember();
        lcCm1.CampaignId=lcCampaign.Id;
        lcCm1.ContactId=lcContact1.Id;
        lcCm1.Candidate_Status__c = 'Confirmed';
        campaignMembersToInsert.add(lcCm1);
        
        CampaignMember lcCm2 = new CampaignMember();
        lcCm2.CampaignId=lcCampaign.Id;
        lcCm2.ContactId=lcContact2.Id;
        lcCm2.Candidate_Status__c = 'Accepted';
        campaignMembersToInsert.add(lcCm2);

        CampaignMember fellowCm1 = new CampaignMember();
        fellowCm1.CampaignId=fellowCampaign.Id;
        fellowCm1.ContactId=fellowContact1.Id;
        fellowCm1.Candidate_Status__c = 'Confirmed';
        campaignMembersToInsert.add(fellowCm1);
        
        CampaignMember fellowCm2 = new CampaignMember();
        fellowCm2.CampaignId=fellowCampaign.Id;
        fellowCm2.ContactId=fellowContact2.Id;
        fellowCm2.Candidate_Status__c = 'Accepted';
        campaignMembersToInsert.add(fellowCm2);

        insert campaignMembersToInsert;
                
        // Fires the trigger we're testing.
        fellowCampaign.Status = 'Completed';
        update fellowCampaign;
        lcCampaign.Status = 'Completed';
        update lcCampaign;
        
        Contact updatedConfirmedLC = [SELECT Id, Volunteer_Information__c FROM Contact WHERE Id = :lcContact1.Id];
        System.Assert(updatedConfirmedLC.Volunteer_Information__c == 'Former LC', 'When a Campaign is marked Completed, Confirmed members should become alumni');
        
        Contact updatedAcceptedLC = [SELECT Id, Volunteer_Information__c FROM Contact WHERE Id = :lcContact2.Id];
        System.Assert(updatedAcceptedLC.Volunteer_Information__c == 'LC Pipeline', 'When a Campaign is marked Completed, Accepted members should stay in the pipeline');

        Contact updatedConfirmedFellow = [SELECT Id, Participant_Information__c FROM Contact WHERE Id = :fellowContact1.Id];
        System.Assert(updatedConfirmedFellow.Participant_Information__c == 'Program Alum', 'When a Campaign is marked Completed, Confirmed members should become alumni');
        
        Contact updatedAcceptedFellow = [SELECT Id, Participant_Information__c FROM Contact WHERE Id = :fellowContact2.Id];
        System.Assert(updatedAcceptedFellow.Participant_Information__c == 'Participant Pipeline', 'When a Campaign is marked Completed, Accepted members should stay in the pipeline');
    }
    
    static testMethod void validateMentorAndVolunteer() {
        System.debug('BZ_CampaignCompleted_TEST.validateMentorAndVolunteer - begin');
        BZ_SettingsFactory_TEST.setSettings();
        System.assert(BZ_Settings__c.getInstance('bz') != null, 'BZ_Settings__c is null');
        List<Contact> contactsToInsert = new List<Contact>();
        Contact eventVolunteerProspectContact1 = new Contact(FirstName='Test', LastName='EV1', Email='testev1@bebraven.org', Event_Volunteer_Information__c='Prospect');
        contactsToInsert.add(eventVolunteerProspectContact1);
        Contact eventVolunteerCurrentContact2 = new Contact(FirstName='Test', LastName='EV2', Email='testev2@bebraven.org', Participant_Information__c='Current');
        contactsToInsert.add(eventVolunteerCurrentContact2);
        Contact mentorProspectContact1 = new Contact(FirstName='Test', LastName='M1', Email='testm1@bebraven.org', Mentor_Information__c='Prospect');
        contactsToInsert.add(mentorProspectContact1);
        Contact mentorCurrentContact2 = new Contact(FirstName='Test', LastName='M2', Email='testm2@bebraven.org', Mentor_Information__c='Current');
        contactsToInsert.add(mentorCurrentContact2);

        insert contactsToInsert;
        
        List<Campaign> campaignsToInsert = new List<Campaign>();
        Campaign mentorCampaign = BZ_CampaignFactory_TEST.create(userInfo.getUserId(), 'Mentor');
        mentorCampaign.IsActive = false;
        mentorCampaign.Status = 'In Progress';
        campaignsToInsert.add(mentorCampaign);
        
        Campaign eventVolunteerCampaign = BZ_CampaignFactory_TEST.create(userInfo.getUserId(), 'Volunteer');
        eventVolunteerCampaign.IsActive = false;
        eventVolunteerCampaign.Status = 'In Progress';
        eventVolunteerCampaign.Volunteer_Opportunities__c = 'Opp1\nOpp2';
        campaignsToInsert.add(eventVolunteerCampaign);

        insert campaignsToInsert;
        
        List<CampaignMember> campaignMembersToInsert = new List<CampaignMember>();
        CampaignMember evCurrentCm1 = new CampaignMember();
        evCurrentCm1.CampaignId=eventVolunteerCampaign.Id;
        evCurrentCm1.ContactId=eventVolunteerCurrentContact2.Id;
        evCurrentCm1.Candidate_Status__c = 'Confirmed';
        campaignMembersToInsert.add(evCurrentCm1);
        
        CampaignMember evProspectCm2 = new CampaignMember();
        evProspectCm2.CampaignId=eventVolunteerCampaign.Id;
        evProspectCm2.ContactId=eventVolunteerProspectContact1.Id;
        campaignMembersToInsert.add(evProspectCm2);

        CampaignMember mentorProspectCm1 = new CampaignMember();
        mentorProspectCm1.CampaignId=mentorCampaign.Id;
        mentorProspectCm1.ContactId=mentorProspectContact1.Id;
        campaignMembersToInsert.add(mentorProspectCm1);
        
        CampaignMember mentorCurrentCm2 = new CampaignMember();
        mentorCurrentCm2.CampaignId=mentorCampaign.Id;
        mentorCurrentCm2.ContactId=mentorCurrentContact2.Id;
        mentorCurrentCm2.Candidate_Status__c = 'Confirmed';
        campaignMembersToInsert.add(mentorCurrentCm2);

        insert campaignMembersToInsert;
                
        // Fires the trigger we're testing.
        eventVolunteerCampaign.Status = 'Completed';
        update eventVolunteerCampaign;
        mentorCampaign.Status = 'Completed';
        update mentorCampaign;
        
        Contact updatedProspectMentor = [SELECT Id, Mentor_Information__c FROM Contact WHERE Id = :mentorProspectContact1.Id];
        System.Assert(updatedProspectMentor.Mentor_Information__c == 'Prospect', 'When a Mentor Campaign is marked Completed, Prospect members should stay as they are');
        
        Contact updatedCurrentMentor = [SELECT Id, Mentor_Information__c FROM Contact WHERE Id = :mentorCurrentContact2.Id];
        System.Assert(updatedCurrentMentor.Mentor_Information__c == 'Former', 'When a Mentor Campaign is marked Completed, Confirmed Mentors should become Former');

        Contact updatedProspectEventVolunteer = [SELECT Id, Event_Volunteer_Information__c FROM Contact WHERE Id = :eventVolunteerProspectContact1.Id];
        System.Assert(updatedProspectEventVolunteer.Event_Volunteer_Information__c == 'Prospect', 'When a Event Volunteer Campaign is marked Completed, Prospects should stay Prospects');
        
        Contact updatedCurrentEventVolunteer = [SELECT Id, Event_Volunteer_Information__c FROM Contact WHERE Id = :eventVolunteerCurrentContact2.Id];
        System.Assert(updatedCurrentEventVolunteer.Event_Volunteer_Information__c == 'Former', 'When a Event Volunteer Campaign is marked Completed, Confirmed members should become Former');
    }
}
